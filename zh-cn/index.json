[{"categories":["计算机"],"content":"常用排序算法如下 import java.util.Arrays; import java.util.Comparator; //约定 abstract class Sort\u003cT extends Comparable\u003cT\u003e\u003e { public abstract void sort(T[] nums); protected boolean less(T v, T w) { return v.compareTo(w) \u003c 0; } protected void swap(T[] a, int i, int j) { T t = a[i]; a[i] = a[j]; a[j] = t; } } //开始实现不同类型的排序算法 //选择排序 class SelectionSort\u003cT extends Comparable\u003cT\u003e\u003e extends Sort\u003cT\u003e{ @Override public void sort(T[] nums) { int n = nums.length; for (int i = 0;i\u003cn-1;i++){ int min = i; for (int j = i+1;j\u003cn;j++){ if (less(nums[j],nums[min])){ min = j; } } swap(nums,i,min); } } } //冒泡排序 class BubbleSort\u003cT extends Comparable\u003cT\u003e\u003e extends Sort\u003cT\u003e { @Override public void sort(T[] nums) { int n = nums.length; for (int i = 0 ;i \u003c n-1;i++){ for (int j = 0;j\u003cn-1-i;j++){ if(less(nums[j+1],nums[j])){ swap(nums,j,j+1); } } } } } //插入排序 class InsetionSort\u003cT extends Comparable\u003cT\u003e\u003e extends Sort\u003cT\u003e{ @Override public void sort(T[] nums) { int n = nums.length; for (int i = 1 ; i \u003c n ; i ++){ for ( int j = i ; j \u003e0 \u0026\u0026 less(nums[j],nums[j-1]);j--){ swap(nums,j,j-1); } } } } public class Main { public static void main(String[] args) { Integer[] arrayToSort = {64, 25, 12, 22, 11}; SelectionSort\u003cInteger\u003e selectionSort = new SelectionSort\u003c\u003e(); BubbleSort\u003cInteger\u003e bubbleSort = new BubbleSort\u003c\u003e(); InsetionSort\u003cInteger\u003e integerInsetionSort = new InsetionSort\u003c\u003e(); // bubbleSort.sort(arrayToSort); // selectionSort.sort(arrayToSort); integerInsetionSort.sort(arrayToSort); System.out.println(Arrays.toString(arrayToSort)); } } ","date":"2023-12-08","objectID":"/zh-cn/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/:0:0","tags":["算法"],"title":"排序算法","uri":"/zh-cn/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"categories":["计算机"],"content":"Socket概述 Java的网络编程主要涉及到的内容是Socket编程。Socket，套接字，就是两台主机之间逻辑连接的端点。TCP/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。Socket是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议、本地主机的IP地址、本地进程的协议端口、远程主机的IP地址、远程进程的协议端口。 应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP协议交互提供了套接字（Socket）接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务 Socket，实际上是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。实际上，Socket跟TCP/IP协议没有必然的关系，Socket编程接口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现，只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、listen、accept、send、read和write等等。 网络有一段关于socket和TCP/IP协议关系的说法比较容易理解： “TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。这个就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。” 实际上，传输层的TCP是基于网络层的IP协议的，而应用层的HTTP协议又是基于传输层的TCP协议的，而Socket本身不算是协议，就像上面所说，它只是提供了一个针对TCP或者UDP编程的接口。socket是对端口通信开发的工具,它要更底层一些。 ","date":"2023-12-06","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/:1:0","tags":["网络"],"title":"网络编程","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"categories":["计算机"],"content":"Socket整体流程 Socket编程主要涉及到客户端和服务端两个方面，首先是在服务器端创建一个服务器套接字（ServerSocket），并把它附加到一个端口上，服务器从这个端口监听连接。端口号的范围是0到65536，但是0到1024是为特权服务保留的端口号，我们可以选择任意一个当前没有被其他进程使用的端口。 客户端请求与服务器进行连接的时候，根据服务器的域名或者IP地址，加上端口号，打开一个套接字。当服务器接受连接后，服务器和客户端之间的通信就像输入输出流一样进行操作。 ","date":"2023-12-06","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/:2:0","tags":["网络"],"title":"网络编程","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"categories":["计算机"],"content":"什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员? 数据库 : 数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。 数据库管理系统 : 数据库管理系统(Database Management System 简称 DBMS)是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。 数据库系统 : 数据库系统(Data Base System，简称 DBS)通常由软件、数据库和数据管理员(DBA)组成。 数据库管理员 : 数据库管理员(Database Administrator, 简称 DBA)负责全面管理和控制数据库系统。 ","date":"2023-12-06","objectID":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/:1:0","tags":["数据库"],"title":"数据库","uri":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["计算机"],"content":"什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？ 元组：元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 在二维表里，元组也称为行。 码：码就是能唯一标识实体的属性，对应表中的列。 候选码：若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何、子集都不能再标识，则称该属性组为候选码。例如：在学生实体中，“学号”是能唯一的区分学生实体的，同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么{学号}和{姓名，班级}都是候选码。 主码 : 主码也叫主键。主码是从候选码中选出来的。 一个实体集中只能有一个主码，但可以有多个候选码。 外码 : 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。 主属性：候选码中出现过的属性称为主属性。比如关系 工人（工号，身份证号，姓名，性别，部门）. 显然工号和身份证号都能够唯一标示这个关系，所以都是候选码。工号、身份证号这两个属性就是主属性。如果主码是一个属性组，那么属性组中的属性都是主属性。 非主属性： 不包含在任何一个候选码中的属性称为非主属性。比如在关系——学生（学号，姓名，年龄，性别，班级）中，主码是“学号”，那么其他的“姓名”、“年龄”、“性别”、“班级”就都可以称为非主属性。 ","date":"2023-12-06","objectID":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/:2:0","tags":["数据库"],"title":"数据库","uri":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["计算机"],"content":"什么是 ER 图？ 我们做一个项目的时候一定要试着画 ER 图来捋清数据库设计，这个也是面试官问你项目的时候经常会被问到的。 ER 图 全称是 Entity Relationship Diagram（实体联系图），提供了表示实体类型、属性和联系的方法。 ER 图由下面 3 个要素组成： 实体：通常是现实世界的业务对象，当然使用一些逻辑对象也可以。比如对于一个校园管理系统，会涉及学生、教师、课程、班级等等实体。在 ER 图中，实体使用矩形框表示。 属性：即某个实体拥有的属性，属性用来描述组成实体的要素，对于产品设计来说可以理解为字段。在 ER 图中，属性使用椭圆形表示。 联系：即实体与实体之间的关系，在 ER 图中用菱形表示，这个关系不仅有业务关联关系，还能通过数字表示实体之间的数量对照关系。例如，一个班级会有多个学生就是一种实体间的联系。 下图是一个学生选课的 ER 图，每个学生可以选若干门课程，同一门课程也可以被若干人选择，所以它们之间的关系是多对多（M: N）。另外，还有其他两种实体之间的关系是：1 对 1（1:1）、1 对多（1: N）。 著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/database/basis.html ","date":"2023-12-06","objectID":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/:3:0","tags":["数据库"],"title":"数据库","uri":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["计算机"],"content":"数据库三大范式 ","date":"2023-12-06","objectID":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/:4:0","tags":["数据库"],"title":"数据库","uri":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["计算机"],"content":"第一范式（1NF）： 第一范式要求数据库表的每个列都是原子的，即不可再分。具体要求包括： 每一列的值都是原子性的，不能再分为更小的单元。 每一列都具有唯一的列头（字段名）。 StudentID Subjects Marks 1 Math, Physics 90, 85 2 Chemistry, Math 78, 92 ","date":"2023-12-06","objectID":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/:4:1","tags":["数据库"],"title":"数据库","uri":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["计算机"],"content":"第二范式（2NF）： 第二范式要求数据库表在满足第一范式的基础上，非主键列完全依赖于主键，即所有非主键列都完全依赖于主键，而不是部分依赖。如果有部分依赖，则需要将数据表进一步拆分。 OrderID Product ProductType Price 1 Laptop Electronics 1000 2 Pencil Stationery 1 不满足2NF，应拆分为： OrderID Product Price 1 Laptop 1000 2 Pencil 1 Product ProductType Laptop Electronics Pencil Stationery ","date":"2023-12-06","objectID":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/:4:2","tags":["数据库"],"title":"数据库","uri":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["计算机"],"content":"第三范式（3NF）： 第三范式要求数据库表在满足第二范式的基础上，非主键列之间没有传递依赖关系。如果存在传递依赖，则需要进一步拆分表。 StudentID Course Professor ProfessorOffice 1 Math Dr. Smith Room 101 2 Chemistry Dr. Johnson Room 102 不满足三范式 StudentID Course Professor 1 Math Dr. Smith 2 Chemistry Dr. Johnson Professor Office Dr. Smith Room 101 Dr. Johnson Room 102 ","date":"2023-12-06","objectID":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/:4:3","tags":["数据库"],"title":"数据库","uri":"/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["工作"],"content":"2023.12.6 其实2023年上半年就有找实习的想法，但是因为种种原因，也就面了一场。 2023年下半年来苏州了 10月份在上课，11月开始复习java的知识，11月中旬重新准备简历，之前的简历水分太大，虽然现在也是（在把简历上的东西尽量吃透），我发现找工作其实是一个复习的过程，复习这几年做过的项目，同时也是来补这几年欠下的债 上一周疯狂面试，中途还去了一些销售的岗位，也算是见世面了，这世上没有哪一分钱是好赚的… 在技术面试中，果然被疯狂拷打了，一问到具体的技术知识，能答上来的没几个，哈哈哈，也好，被多拷打拷打，知道当前自己的不足，要不然自己老陷入在自己随便找就能找到软件技术工作的现象中，梦该醒了 仔细一想，开始的挺早的，但是基本都是浅尝辄止，快到找工作的时候了，真得好好沉淀了 btw,今天面试的时候，问到了数学建模比赛的东西，可以拿出来再准备一下，包装的好的话可以放到项目里面 对于三个项目，第一个比较好说，第二个需要设计到一些操作原理的东西，可能会根据这个项目问一些关于SpringBoot Mybatis-Plus 以及数据库的知识 第三个需要了解 金属探测器传回的数据类型，以及如何根据金属探测器来实现循迹，以及用到的控制算法，实现逻辑，还有小车的循迹算法的细节 ","date":"2023-12-06","objectID":"/zh-cn/%E6%89%BE%E5%B7%A5%E5%BF%83%E5%BE%97/:1:0","tags":["心得"],"title":"找工之路","uri":"/zh-cn/%E6%89%BE%E5%B7%A5%E5%BF%83%E5%BE%97/"},{"categories":["工作"],"content":"Java ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:0","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"重载和重写的区别 重写(Overriding)是”外壳不变，核心重写”,即在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法。 重载(overloading) 是**在一个类里面，方法名字相同，而参数不同。**返回类型可以相同也可以不同。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:1","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"HashMap的put实现流程 计算Key的哈希值： 首先，HashMap会调用Key的hashCode()方法来获取Key的哈希码（hash code）。 计算哈希值的索引位置： 使用哈希值和HashMap的容量进行计算，确定存储位置。具体计算方法是取哈希值对容量取余数，这个余数就是键值对应的数组索引。 处理冲突： 如果发现两个不同的Key计算得到相同的索引位置，发生了哈希冲突。HashMap使用链表或红黑树等数据结构来解决冲突。 插入键值对： 如果在特定位置没有冲突，或者已经通过链表或树解决了冲突，就将键值对插入到相应的位置。 检查是否需要进行扩容： 如果插入键值对后，HashMap的大小超过了某个阈值，就会触发HashMap的扩容操作，以保持哈希表的负载因子在可接受范围内。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:2","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"Mysql的数据结构和索引 最基本的是表，表是由行列组成的，每一行表示一条记录，每一列表示记录中的一个属性。表的数据结构可以简单描述为二维表格、 索引是一种用于加速数据检索的数据结构 B树索引： 大多数情况下，MySQL使用B树（或B+树）作为索引的数据结构。B树是一种平衡树结构，它可以快速定位到目标值。B+树相较于B树在内部节点只存储索引字段的值，而数据都存储在叶子节点，这样可以提高范围查询的性能。 哈希索引： MySQL也支持哈希索引，但有一些限制。哈希索引适用于等值查询，但不支持范围查询，也无法按顺序存储数据。 全文索引： 用于全文搜索的索引类型，例如FULLTEXT索引。它允许对文本列进行全文搜索，而不仅仅是简单的等值匹配。 空间索引： 用于地理空间数据类型的索引，例如SPATIAL索引。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:3","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"java的抽象类和接口类的区别 抽象类（Abstract Class）： 定义： 抽象类是用于表示一种抽象概念的类，它不能被实例化，只能被继承。抽象类可以包含抽象方法（没有实现的方法）和具体方法（有实现的方法）。 关键特点： 抽象类可以包含成员变量和普通方法。 抽象方法用 abstract 关键字声明，子类必须实现抽象方法。 抽象类的构造函数在子类中被调用时会执行，但抽象类本身不能被实例化。 继承： 一个类只能继承一个抽象类。 例子： abstract class Animal { String name; abstract void makeSound(); // 抽象方法 void eat() { System.out.println(\"Animal is eating.\"); } } 接口（Interface）： 定义： 接口是一种完全抽象的类，它定义了一组方法的签名，但没有提供方法的具体实现。接口中的所有方法都默认是 public 和 abstract 的。 关键特点： 接口中只能包含常量（static final）和抽象方法。 接口中的方法默认是 public 和 abstract 的，可以省略这些关键字。 类实现接口时，必须提供接口中所有方法的具体实现。 实现： 一个类可以实现多个接口。 例子： interface Animal { void makeSound(); // 抽象方法 default void eat() { System.out.println(\"Animal is eating.\"); } } 区别总结： 多继承： 类可以继承一个抽象类，但只能实现多个接口。Java中不支持多继承，但通过接口可以实现类似的效果。 构造函数： 抽象类有构造函数，接口没有。抽象类的构造函数在子类实例化时会被调用，而接口没有构造函数。 成员变量： 抽象类可以包含成员变量，而接口只能包含常量。 默认实现： 接口中可以包含默认实现的方法（使用 default 关键字），而抽象类中的方法默认需要在子类中实现。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:4","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"Java怎么加锁 在 Java 中，有几种方式可以加锁，其中最常用的是使用 synchronized 关键字和 ReentrantLock 类。这两种方式都可以用来保护共享资源，防止多个线程并发访问导致的竞态条件。 1. 使用 synchronized 关键字： synchronized 关键字可以用来修饰方法或代码块，以实现对共享资源的加锁。下面是两种使用 synchronized 的方式： a. 修饰方法： public class SynchronizedExample { private int count = 0; public synchronized void increment() { count++; } public synchronized int getCount() { return count; } } b. 修饰代码块： public class SynchronizedExample { private int count = 0; private Object lock = new Object(); public void increment() { synchronized (lock) { count++; } } public int getCount() { synchronized (lock) { return count; } } } 2. 使用 ReentrantLock 类： ReentrantLock 是 java.util.concurrent.locks 包中提供的一种加锁机制。相比于 synchronized，ReentrantLock 提供了更多的灵活性和功能，但使用时需要注意及时释放锁，以避免死锁的发生。 import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class ReentrantLockExample { private int count = 0; private Lock lock = new ReentrantLock(); public void increment() { lock.lock(); try { count++; } finally { lock.unlock(); } } public int getCount() { lock.lock(); try { return count; } finally { lock.unlock(); } } } 无论是使用 synchronized 还是 ReentrantLock，都是为了保护共享资源，防止多个线程同时修改导致的并发问题。选择哪种方式取决于具体的需求和场景。在简单情况下，synchronized 可能更为方便，而在需要更多控制和功能的情况下，ReentrantLock 提供了更多选项。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:5","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"Synchronized和ReentrantLock两个的实现原理是什么 Synchronized 和 ReentrantLock 都是用来进行线程同步的工具，但它们的实现原理有一些差异。 1. Synchronized 的实现原理： 内部锁（Monitor）： 在 Java 中，每个对象都有一个与之关联的内部锁，也称为监视器锁（Monitor Lock）或对象锁。当一个线程进入被 synchronized 修饰的方法或代码块时，它会尝试获取对象的锁。如果锁已经被其他线程占用，那么线程将被阻塞，直到锁被释放。 对象头标记： 对象头中包含了用于存储锁信息的字段。当线程尝试获得锁时，JVM 会检查对象头中的锁标记。如果锁未被占用，线程获得锁并继续执行。如果锁已被其他线程占用，线程将被放入等待队列，等待锁的释放。 可重入性： Synchronized 具有可重入性，同一线程可以多次获取同一个对象的锁，而不会导致死锁。 2. ReentrantLock 的实现原理： AQS（AbstractQueuedSynchronizer）： ReentrantLock 是基于 AQS 框架实现的。AQS 是 Java 中用于构建锁和其他同步器的框架。它使用了一个双向队列来管理等待锁的线程。 独占锁： ReentrantLock 是一种独占锁（Exclusive Lock），同一时刻只有一个线程可以获得锁。当线程尝试获取锁时，如果锁已经被其他线程占用，它将被放入等待队列，而不是一直忙等。 Condition： ReentrantLock 还提供了 Condition 对象，可以用于实现更灵活的线程通信。 可中断性： ReentrantLock 支持可中断的获取锁操作，线程可以通过 lockInterruptibly 方法中断等待锁的过程。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:6","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"C++ ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:2:0","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"C++有没有java中继承和实现一说 在C++中，有继承（inheritance）的概念，但和Java一样，C++中的继承并没有像Java那样的\"implements\"关键字，而是使用\"派生类（子类）继承基类（父类）“的方式。 C++中的继承分为两种主要类型： 公有继承（Public Inheritance）： 使用public关键字表示。在公有继承中，派生类（子类）可以访问基类（父类）的公有成员和受保护成员。这种继承关系符合\"is-a\"关系。 // 基类 class Base { public: int publicMember; protected: int protectedMember; private: int privateMember; }; // 派生类 class Derived : public Base { // Derived 可以访问 Base 的 publicMember 和 protectedMember }; 私有继承（Private Inheritance）： 使用private关键字表示。在私有继承中，基类的公有和保护成员在派生类中都变成了私有成员。这种继承关系通常用于实现\"has-a\"关系，而不是\"is-a\"关系。 class Derived : private Base { // Base 的所有成员在 Derived 中都变为私有成员 }; 在C++中，类可以继承多个类，这被称为多重继承。多重继承可能导致菱形继承问题，为了解决这个问题，C++引入了虚继承（virtual inheritance）。虚继承允许在继承体系中共享基类的实例，以避免派生类中包含多个实例的问题。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:2:1","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"计算机网络 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:0","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"网络协议 IP协议，TCP协议，UDP协议，HTTP协议 TCP/IP协议是传输层协议，主要解决数据如何在网络中传输，HTTP是应用层协议，主要解决如何包装数据 IP协议 IP协议的作用在于把各种数据包准备无误的传递给对方，其中两个重要的条件是IP地址和MAC地址 TCP协议 TCP（传输控制协议）是面向连接的传输层协议。两部分组成 首部和数据 不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。TCP协议采用字节流传输数据。 TCP 三次握手建立连接和四次挥手关闭 为什么连接的时候是三次握手，关闭的时候却是四次挥手？ 服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。 但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭socket，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文，我收到了”。只有等到服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四步挥手。 UDP协议 TCP/IP协议簇中无连接的运输层协议。两部分组成 首部和数据。 TCP和UDP的区别 TCP基于连接，UDP是无连接的； 对系统资源的要求，TCP较多，UDP较少； UDP程序结构较简单； TCP是流模式，而UDP是数据报模式； TCP保证数据正确性，而UDP可能丢包；TCP保证数据顺序，而UDP不保证； ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:1","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"HTTP请求报文的格式 请求报文：请求行 首部行 实体主体 HTTP响应报文格式 ：状态行 首部行 实体主体 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:2","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"HTTP请求方法 HTTP请求报文例子中，我们可以看到请求方法是GET，这表示请求读取由URL所标志的信息，除了GET，还有其他几种常用的方法。 在HTTP响应报文的例子中，我们可以看到状态码是200，表示响应成功。下表是其他状态码，总共5大类，33种。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:3","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["工作"],"content":"HTTP和HTTPS的区别 HTTP（HyperText Transfer Protocol）和 HTTPS（HyperText Transfer Protocol Secure）是用于在 Web 上传输数据的两种协议，它们之间主要区别在于安全性和数据传输方式。 HTTP（HyperText Transfer Protocol）: 安全性： HTTP 不是安全协议，所有的数据传输都是明文的，容易受到中间人攻击，即在数据传输过程中，攻击者可以窃听、修改或篡改传输的数据。 加密： HTTP 不提供对数据的加密保护机制，因此敏感信息（如用户名和密码）在传输过程中容易被窃取。 端口： 默认使用端口80进行通信。 HTTPS（HyperText Transfer Protocol Secure）: 安全性： HTTPS 是 HTTP 的安全版本。它使用 SSL/TLS 协议对数据进行加密，确保在数据传输过程中的机密性和完整性。 加密： 通过使用 SSL/TLS，HTTPS 在传输过程中对数据进行加密，防止中间人攻击和窃听。 证书： 使用数字证书来验证服务器的身份，确保连接的目标是合法的，同时提供对数据传输的身份验证。 端口： 默认使用端口443进行通信。 性能： 由于加密和解密需要额外的计算资源，因此 HTTPS 在性能上相对于 HTTP 稍微慢一些，尤其是对于大型网站。 区别总结： 安全性： HTTPS比HTTP更安全，适用于对数据保密性和完整性要求较高的场景，如在线支付、用户登录等。 加密： HTTPS通过SSL/TLS协议对传输的数据进行加密，而HTTP传输的数据是明文的。 证书： HTTPS使用数字证书进行服务器和客户端的身份验证，确保连接的安全性。 性能： 由于加密和解密操作的额外开销，HTTPS可能会稍微降低性能，但现代硬件和优化措施可以在很大程度上缓解这个问题。 ","date":"2023-12-04","objectID":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:4","tags":["面试"],"title":"被问到（倒）的面试题以及疑难杂症","uri":"/zh-cn/%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["计算机"],"content":"三大特性 封装 利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外的接口使其与外部发生联系。用户无需关心对象内部的细节，但可以通过对象对外提供的接口来访问该对象。 继承 is-a的关系 继承关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。 is-a/has–a/like-a is-a 继承关系 A is a B 说明A是B的一个子类 has-a 表示从属关系A has a B，那么B就是A的组成部分。 同一种类的对象，通过它们的属性的不同值来区别。 like-a，顾名思义，像一个，代表组合关系。 如果A like a B，那么B就是A的接口。 Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 向上转型 。 Animal animal = new Cat(); 多态 多态分为编译时多态和运行时多态： 编译时多态主要指方法的重载 运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定 运行时多态有三个条件： 继承 覆盖（重写） 向上转型 下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。 public class Instrument { public void play() { System.out.println(\"Instument is playing...\"); } } public class Wind extends Instrument { public void play() { System.out.println(\"Wind is playing...\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\"Percussion is playing...\"); } } public class Music { public static void main(String[] args) { List\u003cInstrument\u003e instruments = new ArrayList\u003c\u003e(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } } Wind is playing... Percussion is playing. ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:1:0","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"类图 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:2:0","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"泛化关系 用来描述继承关系，在 Java 中使用 extends 关键字。 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:2:1","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"实现关系 用来实现一个接口，在 Java 中使用 implements 关键字。 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:2:2","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"聚合关系 表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:2:3","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"组合关系 和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:2:4","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"关联关系 表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:2:5","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"依赖关系 和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式： A 类是 B 类方法的局部变量； A 类是 B 类方法的参数； A 类向 B 类发送消息，从而影响 B 类发生变化。 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:2:6","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"设计原则 简写 全拼 中文翻译 SRP The Single Responsibility Principle 单一责任原则 OCP The Open Closed Principle 开放封闭原则 LSP The Liskov Substitution Principle 里氏替换原则 ISP The Interface Segregation Principle 接口分离原则 DIP The Dependency Inversion Principle 依赖倒置原则 单一责任原则 修改一个类的原因应该只有一个。 换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。 如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。 开放封闭原则 类应该对扩展开放，对修改关闭。 扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。 符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。 3. 里氏替换原则 子类对象必须能够替换掉所有父类对象。 继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。 如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。 4. 接口分离原则 不应该强迫客户依赖于它们不用的方法。 因此使用多个专门的接口比使用单一的总接口要好。 5. 依赖倒置原则 高层模块不应该依赖于低层模块，二者都应该依赖于抽象； 抽象不应该依赖于细节，细节应该依赖于抽象。 高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。 ","date":"2023-11-27","objectID":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/:3:0","tags":[],"title":"面向对象编程","uri":"/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"},{"categories":["计算机"],"content":"指针 指针就是一个值，而这个值是某块内存的地址，通过这个值，就可以找到这块内存 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:1:0","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"引用 在JAVA中数据可以简单分为两种类型，基本类型和引用类型。继续细分的话基本类型又可以分为四种整数型 byte、short、int、long 两种浮点型float、double 一种字符类型char 一种布尔型 **boolean。**引用类型可以说有无数种，包括String、数组、object等等。 在java种只有引用类型才有引用 在定义变量时，引用没有实体，不占空间，只有在变量赋值时，引用才有实际值 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:2:0","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"两者联系 引用也是一个值，但是这个值不是某块内存的地址，而是某个值所在内存的地址 引用就是一个封装过的指针，它屏蔽了指针的复杂性，在编译器的实现中，引用最后还是会被转成指针 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:3:0","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"区别 java的引用是某个值所在内存的地址。 c的指针是某块内存的地址 c的指针的值可以认为是个int类型，长度一般是计算机字长。 java的引用，声明变量时(不赋值)，不占空间。(原因见引用类型内存分配) java的引用初始值为 null。c的指针是int，如不初始化指针，那它的值就不是固定的了。 java的引用不可以计算。c的指针是int，他可以计算，如++或–，所以经常用指针来代替数组下标。 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:4:0","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"Java的值传递和引用传递 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:5:0","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"形参和实参 形参：方法被调用时需要传递进来的参数，如：func(int a)中的a，它只有在func被调用期间a才有意义，也就是会被分配内存空间，在方法func执行完成后，a就会被销毁释放空间，也就是不存在了 实参：方法被调用时是传入的实际值，它在方法被调用前就已经被初始化并且在方法被调用时传入。 public static void func(int a ){//a是形参 a=20; System.out.println(a); } public static void main(String[] args) { int a=10;//实参 func(a); } ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:5:1","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"Java的数据类型 数据类型，是编程语言中对内存的一种抽象表达方式，我们知道程序是由代码文件和静态资源组成。 程序被运行前，这些代码存在在硬盘里，程序开始运行，这些代码会被转成计算机能识别的内容放到内存中被执行。 数据类型实质上是用来定义编程语言中相同类型的数据的存储形式，也就是决定了如何将代表这些值的位存储到计算机的内存中 数据在内存中的存储，是根据数据类型来划定存储形式和存储位置的。 那么 Java的数据类型有哪些？ 基本类型：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型： 4种整数类型：byte、short、int、long 2种浮点数类型：float、double 1种字符类型：char 1种布尔类型：boolean 引用类型：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式。它主要包括： 类 接口 数组 有了数据类型，JVM对程序数据的管理就规范化了，不同的数据类型，它的存储形式和位置是不一样的，要想知道JVM是怎么存储各种类型的数据，就得先了解JVM的内存划分以及每部分的职能。 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:5:2","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"JVM内存的划分及职能 Java语言本身是不能操作内存的，它的一切都是交给JVM来管理和控制的，因此Java内存区域的划分也就是JVM的区域划分，在说JVM的内存划分之前，我们先来看一下Java程序的执行过程，如下图： Java代码被编译器编译成字节码之后，JVM开辟一片内存空间（也叫运行时数据区），通过类加载器加到到运行时数据区来存储程序执行期间需要用到的数据和相关信息，在这个数据区中，它由以下几部分组成： 虚拟机栈 虚拟机栈是Java方法执行的内存模型，栈中存放着栈帧，每个栈帧分别对应一个被调用的方法，方法的调用过程对应栈帧在虚拟机中入栈到出栈的过程。 栈是线程私有的，也就是线程之间的栈是隔离的；当程序中某个线程开始执行一个方法时就会相应的创建一个栈帧并且入栈（位于栈顶），在方法结束后，栈帧出栈。 下图表示了一个Java栈的模型以及栈帧的组成： 栈帧:是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。 每个栈帧中包括： 局部变量表:用来存储方法中的局部变量（非静态变量、函数形参）。当变量为基本数据类型时，直接存储值，当变量为引用类型时，存储的是指向具体对象的引用。 操作数栈:Java虚拟机的解释执行引擎被称为\"基于栈的执行引擎\"，其中所指的栈就是指操作数栈。 指向运行时常量池的引用:存储程序执行时可能用到常量的引用。 方法返回地址:存储方法执行完成后的返回地址。 堆 堆是用来存储对象本身和数组的，在JVM中只有一个堆，因此，堆是被所有线程共享的。 程序计数器 线程私有的。 记录着当前线程所执行的字节码的行号指示器，在程序运行过程中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。 方法区 方法区是一块所有线程共享的内存逻辑区域，在JVM中只有一个方法区，用来存储一些线程可共享的内容，它是线程安全的，多个线程同时访问方法区中同一个内容时，只能有一个线程装载该数据，其它线程只能等待。 方法区可存储的内容有：类的全路径名、类的直接超类的权全限定名、类的访问修饰符、类的类型（类或接口）、类的直接接口全限定名的有序列表、常量池（字段，方法信息，静态变量，类型引用（class））等。 本地方法栈 本地方法栈的功能和虚拟机栈是基本一致的，并且也是线程私有的，它们的区别在于虚拟机栈是为执行Java方法服务的，而本地方法栈是为执行本地方法服务的。 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:5:3","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"数据如何在内存中存储 从上面程序运行图我们可以看到，JVM在程序运行时的内存分配有三个地方： 堆 栈 静态方法区 常量区 每个存储区域都有自己的内存分配策略： 堆式： 栈式 静态 Java中的数据类型有基本数据类型和引用数据类型，那么这些数据的存储都使用哪一种策略呢？ 这里要分以下的情况进行探究： 1. 基本数据类型的存储： A. 基本数据类型的局部变量 定义基本数据类型的局部变量以及数据都是直接存储在内存中的栈上，也就是前面说到的**“虚拟机栈”**，数据本身的值就是存储在栈空间里面。 如上图，在方法内定义的变量直接存储在栈中，如 int age=50; int weight=50; int grade=6; 当我们写“int age=50；”，其实是分为两步的： int age;//定义变量 age=50;//赋值 首先JVM创建一个名为age的变量，存于局部变量表中，然后去栈中查找是否存在有字面量值为50的内容，如果有就直接把age指向这个地址，如果没有，JVM会在栈中开辟一块空间来存储“50”这个内容，并且把age指向这个地址。因此我们可以知道： 我们声明并初始化基本数据类型的局部变量时，变量名以及字面量值都是存储在栈中，而且是真实的内容。 我们再来看“int weight=50；”，按照刚才的思路：字面量为50的内容在栈中已经存在，因此weight是直接指向这个地址的。由此可见：栈中的数据在当前线程下是共享的。 那么如果再执行下面的代码呢？ weight=40； 当代码中重新给weight变量进行赋值时，JVM会去栈中寻找字面量为40的内容，发现没有，就会开辟一块内存空间存储40这个内容，并且把weight指向这个地址。由此可知： 基本数据类型的数据本身是不会改变的，当局部变量重新赋值时，并不是在内存中改变字面量内容，而是重新在栈中寻找已存在的相同的数据，若栈中不存在，则重新开辟内存存新数据，并且把要重新赋值的局部变量的引用指向新数据所在地址。 B. 基本数据类型的成员变量 就是在类体中定义的变量 public class Person{ private int age; private String name; private int grade; //篇幅较长，省略setter getter方法 static void run(){ System.out.println(\"run....\"); }; } //调用 Person per=new Person(); 同样是局部变量的age、name、grade却被存储到了堆中为per对象开辟的一块空间中。因此可知：基本数据类型的成员变量名和值都存储于堆中，其生命周期和对象的是一致的。 C. 基本数据类型的静态变量 方法区用来存储一些共享数据，因此基本数据类型的静态变量名以及值存储于方法区的运行时常量池中，静态变量随类加载而加载，随类消失而消失 2. 引用数据类型的存储 堆是用来存储对象本身和数组，而引用（句柄）存放的是实际内容的地址值，因此通过上面的程序运行图，也可以看出，当我们定义一个对象时 Person per=new Person(); 实际上，它也是有两个过程： Person per;//定义变量 per=new Person();//赋值 在执行Person per;时，JVM先在虚拟机栈中的变量表中开辟一块内存存放per变量，在执行per=new Person()时，JVM会创建一个Person类的实例对象并在堆中开辟一块内存存储这个实例，同时把实例的地址值赋值给per变量。因此可见： 对于引用数据类型的对象/数组，变量名存在栈中，变量值存储的是对象的地址，并不是对象的实际内容。 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:5:4","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"值传递和引用传递 值传递： 在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。 public static void valueCrossTest(int age,float weight){ System.out.println(\"传入的age：\"+age); System.out.println(\"传入的weight：\"+weight); age=33; weight=89.5f; System.out.println(\"方法内重新赋值后的age：\"+age); System.out.println(\"方法内重新赋值后的weight：\"+weight); } //测试 public static void main(String[] args) { int a=25; float w=77.5f; valueCrossTest(a,w); System.out.println(\"方法执行后的age：\"+a); System.out.println(\"方法执行后的weight：\"+w); } 传入的age：25 传入的weight：77.5 方法内重新赋值后的age：33 方法内重新赋值后的weight：89.5 方法执行后的age：25 方法执行后的weight：77.5 方法内的操作对实参没有影响 首先程序运行时，调用mian()方法，此时JVM为main()方法往虚拟机栈中压入一个栈帧，即为当前栈帧，用来存放main()中的局部变量表(包括参数)、操作栈、方法出口等信息，如a和w都是mian()方法中的局部变量，因此可以断定，a和w是躺着mian方法所在的栈帧中 如图： 而当执行到valueCrossTest()方法时，JVM也为其往虚拟机栈中压入一个栈，即为当前栈帧，用来存放valueCrossTest()中的局部变量等信息，因此age和weight是躺着valueCrossTest方法所在的栈帧中，而他们的值是从a和w的值copy了一份副本而得，如图： 。 因而可以a和age、w和weight对应的内容是不一致的，所以当在方法内重新赋值时，实际流程如图： 也就是说，age和weight的改动，只是改变了当前栈帧（valueCrossTest方法所在栈帧)里的内容，当方法执行结束之后，这些局部变量都会被销毁，mian方法所在栈帧重新回到栈顶，成为当前栈帧，再次输出a和w时，依然是初始化时的内容。 因此： 值传递传递的是真实内容的一个副本，对副本的操作不影响原内容，也就是形参怎么变化，不会影响实参对应的内容。 引用传递： ”引用”也就是指向真实内容的地址值，在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向同一内存地址，对形参的操作会影响的真实内容。 举个栗子： 先定义一个对象： public class Person { private String name; private int age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } 我们写个函数测试一下： public static void PersonCrossTest(Person person){ System.out.println(\"传入的person的name：\"+person.getName()); person.setName(\"我是张小龙\"); System.out.println(\"方法内重新赋值后的name：\"+person.getName()); } //测试 public static void main(String[] args) { Person p=new Person(); p.setName(\"我是马化腾\"); p.setAge(45); PersonCrossTest(p); System.out.println(\"方法执行后的name：\"+p.getName()); } 输出结果： 传入的person的name：我是马化腾 方法内重新赋值后的name：我是张小龙 方法执行后的name：我是张小龙 可以看出，person经过personCrossTest()方法的执行之后，内容发生了改变，这印证了上面所说的**“引用传递”**，对形参的操作，改变了实际对象的内容。 那么，到这里就结题了吗？ 不是的，没那么简单， 能看得到想要的效果 是因为刚好选对了例子而已！！！ 下面我们对上面的例子稍作修改，加上一行代码， public static void PersonCrossTest(Person person){ System.out.println(\"传入的person的name：\"+person.getName()); person=new Person();//加多此行代码 person.setName(\"我是张小龙\"); System.out.println(\"方法内重新赋值后的name：\"+person.getName()); } 输出结果： 传入的person的name：我是马化腾 方法内重新赋值后的name：我是张小龙 方法执行后的name：我是马化腾 按照上面讲到JVM内存模型可以知道，对象和数组是存储在Java堆区的，而且堆区是共享的，因此程序执行到main（）方法中的下列代码时 Person p=new Person(); p.setName(\"我是马化腾\"); p.setAge(45); PersonCrossTest(p); JVM会在堆内开辟一块内存，用来存储p对象的所有内容，同时在main（）方法所在线程的栈区中创建一个引用p存储堆区中p对象的真实地址，如图： 当执行到PersonCrossTest()方法时，因为方法内有这么一行代码： person=new Person(); JVM需要在堆内另外开辟一块内存来存储new Person()，假如地址为“xo3333”，那此时形参person指向了这个地址，假如真的是引用传递，那么由上面讲到：引用传递中形参实参指向同一个对象，形参的操作会改变实参对象的改变。 可以推出：实参也应该指向了新创建的person对象的地址，所以在执行PersonCrossTest()结束之后，最终输出的应该是后面创建的对象内容。 然而实际上，最终的输出结果却跟我们推测的不一样，最终输出的仍然是一开始创建的对象的内容。 由此可见：引用传递，在Java中并不存在。 但是有人会疑问：为什么第一个例子中，在方法内修改了形参的内容，会导致原始对象的内容发生改变呢？ 这是因为：无论是基本类型和是引用类型，在实参传入形参时，都是值传递，也就是说传递的都是一个副本，而不是内容本身。 无论是基本类型和是引用类型，在实参传入形参时，都是值传递，也就是说传递的都是一个副本，而不是内容本身。 有图可以看出，方法内的形参person和实参p并无实质关联，它只是由p处copy了一份指向对象的地址 p和person都是指向同一个对象。 因此在第一个例子中，对形参p的操作，会影响到实参对应的对象内容。而在第二个例子中，当执行到new Person()之后，JVM在堆内开辟一块空间存储新对象，并且把person改成指向新对象的地址，此时： p依旧是指向旧的对象，person指向新对象的地址。 所以此时对person的操作，实际上是对新对象的操作，于实参p中对应的对象毫无关系。 因此可见：在Java中所有的参数传递，不管基本类型还是引用类型，都是值传递，或者说是副本传递。 只是在传递过程中： 如果是对基本数据类型的数据进行操作，由于原始内容和副本都是==存储实际值==，并且是在==不同的栈区==，因此形参的操作，不影响原始内容。 如果是对引用类型的数据进行操作，分两种情况，一种是==形参和实参==保持指向==同一个对象地址（存储在堆的对象）==，则形参的操作，会影响实参指向的对象的内容。一种是形参被改动==指向新的对象地址==（如==重新赋值引用==），则形参的操作，不会影响实参指向的对象的内容。 ","date":"2023-09-17","objectID":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/:5:5","tags":["编程语言"],"title":"C++指针和Java中引用","uri":"/zh-cn/c-%E6%8C%87%E9%92%88%E5%92%8Cjava%E4%B8%AD%E5%BC%95%E7%94%A8/"},{"categories":["计算机"],"content":"CPP万能头 #include\u003cbits/stdc++.h\u003e using namespace std; int main(){ return 0 ; } #include \u003cstdio.h\u003e #include \u003cstring.h\u003e #include \u003cmath.h\u003e #include \u003cstdlib.h\u003e #include \u003ctime.h\u003e #include \u003calgorithm\u003e #include \u003ciostream\u003e #include \u003cqueue\u003e #include \u003cstack\u003e #include \u003cvector\u003e #include \u003cstring\u003e ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:1:0","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"C/C++ %s %d %u 基本用法 %d 十进制有符号整数 %u 十进制 %f 浮点数 %s 字符串 %c 单个字符 %p 指针的值 %e 指数形式的浮点数 %x, %X 无符号以十六进制表示的整数 %0 无符号以八进制表示的整数 %g 自动选择合适的表示法 可以在\"%“和字母之间加小写字母l, 表示输出的是长型数。 %ld 表示输出long整数 %lf 表示输出double浮点数 可以在”%“和字母之间插进数字表示最大场宽。 例如: %3d 表示输出3位整型数, 不够3位右对齐。 %9.2f 表示输出场宽为9的浮点数, 其中小数位为2, 整数位为6, 小数点占一位, 不够9位右对齐。 %8s 表示输出8个字符的字符串, 不够8个字符右对齐。 如果字符串的长度、或整型数位数超过说明的场宽, 将按其实际长度输出。 但对浮点数, 若整数部分位数超过了说明的整数位宽度, 将按实际整数位输出; 若小数部分位数超过了说明的小数位宽度, 则按说明的宽度以四舍五入输出。 另外, 若想在输出值前加一些0, 就应在场宽项前加个0。 例如: %04d 表示在输出一个小于4位的数值时, 将在前面补0使其总宽度为4位。 如果用浮点数表示字符或整型量的输出格式, 小数点后的数字代表最大宽度, 小数点前的数字代表最小宽度。 例如: %6.9s 表示显示一个长度不小于6且不大于9的字符串。若大于9, 则第9个字符以后的内容将被删除。 可以控制输出左对齐或右对齐, 即在”%“和字母之间加入一个”-\" 号可说明输出为左对齐, 否则为右对齐。 例如: %-7d 表示输出7位整数左对齐 %-10s 表示输出10个字符左对齐 ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:2:0","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"迭代器对容器进行遍历 迭代器是一种检查容器内元素并遍历元素的数据类型，通常用于对C++中各种容器内元素的访问，但不同的容器有不同的迭代器，初学者可以将迭代器理解为指针 因为也是使用*进行访问。 ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:3:0","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"vector迭代器 #include\u003cbits/stdc++.h\u003e using namespace std; // 万能头 int main(){ vector\u003cint\u003e vtr; vtr.push_back(1); vtr.push_back(2); vtr.push_back(4); vtr.push_back(6); vector\u003cint\u003e:: iterator it; for ( it = vtr.begin(); it !=vtr.end(); it++) { cout\u003c\u003c*it\u003c\u003c\" \"; } return 0; } 输出 1 2 4 6 ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:3:1","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"字符串常用函数 String string.find(string a ,pos),a 是子字符串，pos是查找开始的位置 string.length() string.strsub(int start,int length) start 是字符串开始的位置，length是子字符串的长度 ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:4:0","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"set 使用迭代器进行遍历输出 set\u003cstring\u003e country; country.insert(\"China\"); country.insert(\"America\"); country.insert(\"Canada\"); country.insert(\"Canada\"); for (set\u003cstring\u003e:: iterator it = begin(country) ; it!= country.end(); it++) { cout\u003c\u003c*it\u003c\u003c\" \"; } cout\u003c\u003cendl; country.erase(\"American\"); if(!country.count(\"American\")){ cout\u003c\u003c\"Can't find American\"\u003c\u003cendl; } ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:4:1","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"多组输入 ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:0","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"C #include \u003cbits/stdc++.h\u003e using namespace std; int main() { int a, b; while (scanf(\"%d%d\", \u0026a, \u0026b) != EOF) { printf(\"%d\\n\", a+b); } return 0; } 一个多组输入的例子 double a; while (scanf(\"%lf\", \u0026a) != EOF) { if (a \u003c 1000) { // 使用%g可以除去小数点后面多余的0 如果是整数的话 显示整数 printf(\"discount=1,pay=%g\\n\", a); } if (a \u003e= 1000 \u0026\u0026 a \u003c 2000) { printf(\"discount=0.95,pay=%g\\n\", a * 0.95); } if (a \u003e= 2000 \u0026\u0026 a \u003c 3000) { printf(\"discount=0.9,pay=%g\\n\", a * 0.9); } if (a \u003e= 3000 \u0026\u0026 a \u003c 5000) { printf(\"discount=0.85,pay=%g\\n\", a * 0.85); } if (a \u003e= 5000) { printf(\"discount=0.8,pay=%g\\n\", a * 0.8); } } ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:1","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"CPP #include \u003cbits/stdc++.h\u003e using namespace std; int main() { int a, b; while (cin \u003e\u003e a \u003e\u003e b) { cout \u003c\u003c a + b \u003c\u003c endl; } return 0; } ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:2","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"Java Scanner stdin = new Scanner(System.in); while (stdin.hasNext()) { String s = stdin.next(); int n = stdin.nextInt(); double b = stdin.nextDouble(); } ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:3","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"Python while True: try: a, b = map(int, input().split()) c = a+b print(c) except: #读到文件末尾抛出异常结束循环 break ","date":"2023-07-05","objectID":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:4","tags":["机考"],"title":"机考笔记","uri":"/zh-cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"IELTS SPEAKING 4个万能原因 1.喜欢做一些有挑战性，有难度的事情，当我做这些事情的时候让我很兴奋 I Like to do challenging things, I will feel excited when I do them ,if I finished them eventually ,I would feel a sense of achievement 2.喜欢可以让我节约时间的事情，这会让我效率提高 I like to do things that save me time, making me more efficient, and I can have more time to try different things that I like 3.我注意自己的外表、身体和心理健康，这使我看起来更有吸引力和更强壮。我喜欢做一些能提高免疫力的事情，使我觉得自己可以活得更久，可以有更多时间做我喜欢的事情。 I take care of my appearance, physical and mental health, which makes me look more attractive and stronger.I enjoy doing things that boost my immune system ,making me feel like I can live longer and have more time to do somethings that I like. 4.因为我的外向性格，我总想做一个带头人，喜欢帮助其他人，希望带领其他人做一些让他们成功的事情，这会让我有很大的成就感 Because of my outgoing personality, I always want to be a leader; I like to help others and want to lead others to do something that will make them successfu .If I finished things successfull ,I would feel a sense of achievement. 5.我喜欢那些给我很多自由去创造的东西，允许我创造一些独特的东西。我感觉我发明了一个新的东西，这非常令人兴奋。 I like things that give me much freedom to creat ,allowing me to create something uniqu .I feel like I’ve invented a new item ,which is very exciting. ","date":"2023-01-22","objectID":"/zh-cn/part1_4%E4%B8%AA%E4%B8%87%E8%83%BD%E5%8E%9F%E5%9B%A0/:0:0","tags":["雅思口语"],"title":"PART1_4个万能原因","uri":"/zh-cn/part1_4%E4%B8%AA%E4%B8%87%E8%83%BD%E5%8E%9F%E5%9B%A0/"},{"categories":["雅思备考"],"content":"人物 发生前： When I was a freshman, my major was computer science, and I found that I was very new to my major because I had no exposure to computers before I went to university I was learning slower than the others when I was taking programming classes.,which made me unmotivated and very anxious 发生时： In the second semester of my first year, I joined one of the university’s computer labs and met a tutor who taught me to program websites, which got me interested in web development and gave me a clear plan for my future This teacher told me that I needed to learn self-study at university, so he recommended a lot of books and videos on programming and gave me a lot of small tasks, and in the process, I found that my programming skills had improved a lot 发生后： with the help of my teacher, I learned to teach myself through books and videos Through my studies, I eventually built a large website, which gave me a great sense of achievement Through this project, I also found my interest and it had given me a clear goal for the future, I want to be a development engineer This has taught me that self-learning skills are important at university and it has helped me find a clear direction I love 爱好 workout 每天早上起来吃完早饭，去健身房做weight lifting take shower at the gym 生日： 和家里人聚餐，吃面，吃蛋糕，和朋友出去玩，打篮球或者唱歌 地点： 我生活在一个西北的小镇，气候干燥 旅游过的地方 ","date":"2023-01-19","objectID":"/zh-cn/part2%E4%B8%87%E8%83%BD%E5%8E%9F%E5%9B%A0/:0:0","tags":["雅思口语"],"title":"PART2万能原因","uri":"/zh-cn/part2%E4%B8%87%E8%83%BD%E5%8E%9F%E5%9B%A0/"},{"categories":["雅思备考"],"content":"一些易错的语法笔记 ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:0:0","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"Would 和Will 使用Would的时候，前面必须使用过去式，因为代表一种假设 ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:1:0","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"Would 三种用法 过去式 Ex: He said he would join us at 3 pm. 避免太直接的语气 Ex : Would you please pick up your room before you go? 用来形成虚拟语气 Ex: If I were ten years younger , I would go back to grad school. ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:1:1","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"Little a litte ; few a few的区别 加a 都是有一点 表示肯定 little 和few都是表示几乎没有 表示否定 a little 和a few表示有一点 quite后面加a few或者a little表示相当多的意思 Ex : During the 10 years , he gained quite a little knowledge about liquor very后面 加few 或者little 表示很少的意思，此时不能使用a little或者a few Ex : very few students know how to learn it well only 或者just后面 使用a few 或者a little 不适用few或者little 表示只有几个 Ex : I have only a few friends here ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:2:0","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"AT ON IN区别 ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:3:0","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"in 在谈到时间的时候，in指的是较长的时间，像是在一天，一个月，一个季节或一年。 例如：I always brush my teeth in the morning. My birthday is in June. It’s always cold in winter. My brother was born in 1999. — 当谈到地点的时候，in指的通常是较大的地点，像是附近邻里地区，城市，国家，或在一个地点里面，像是在商店，在家或在房间。 例如：I used to live in Florida. Bangkok is in Thailand. I am in my room. — in还可以用来指某个阅读的内容，像是报纸或资料等。 例如：I read it in the newspaper. The order was in the e-mail. — ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:3:1","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"on 在谈到时间的时候，on指的是特定的日期或某一天。 例如：He was born on September 24th. I go to the gym on Mondays and Wednesdays. — 当谈到地点的时候，on指的通常是物体的表面或是街道等。 例如：The papers are on the coffee table. I left the keys on the counter. — on还可以用来表无法在纸本上呈现的电子媒体资讯。 例如：There is an awesome video on YouTube. You can not believe everything on the internet. She is on the phone. — ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:3:2","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"at 在谈到时间的时候，at指的是特定较小的时间点，像是几点几分。 例如：I will see you at 8 pm. My interview is at 3 pm. — 当谈到地点的时候，at指的是特定较小的地点。 例如：We are meeting at the cafe. (Let’s meet at the cafe.) The football game is at the stadium. ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:3:3","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"FOR 和TO 表动机、目的 虽然介系词for 跟to 都有表达动机、目的地意思，但是在语法架构上，to 后面接的是动词，而for 后面接的是名词。 I moved to Taipei for a new job. 我为了找工作搬到台北。 I moved to Taipei to work. 我搬到台北工作。 表地点、目的地 For 跟to 都有表达前往某个地点的意思，但是for通常会跟leave, start, set out, set off, depart, be bound 等动词连用，且有向某个方向前进的意思。To则较常与come, drive, fly, get, go, lead, move, return, ride, run, travel, walk 等动词搭配使用，有明确到达某个目的地的含义。 This flight is bound for Taipei. 这架航班将飞往台北。 This train is going to Rome. 这列火车要去罗马。 ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:4:0","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"TO Let’s meet at ten to eleven. It’s about 8km from my apartment to yours. I prefer apples to watermelons. I am going to Italy. ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:4:1","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"FOR ","date":"2023-01-14","objectID":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/:4:2","tags":["语法"],"title":"英语语法笔记","uri":"/zh-cn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"},{"categories":["雅思备考"],"content":"一、引出话题 首先first of all, in the first place, to begin with, to start with **根据…**according to, based on 据说It is said that… 如…所示as is shown in 如你所知as you know 众所周知as is known to all 目前，不久presently 最近lately 现在now As is known to all, this is a classic song “With you all the way” by Jacky， and we will have lots to convey when hearing this song. 众所周知，这是张学友的经典歌曲《一路上有你》，每次听到这首歌都会有很多感慨。 二、提出观点 依我看来 in my opinion, in my view, in my point of view, as far as I am concerned, as for me, personally Personally, I plan to leverage this advice within my department and also share it with my clients. 就个人而言，我计划在我的部门推行这些建议，并与客户共同分享。 三、列举 例如 such as, for example/instance, take…for example, take… as an example, including, like 一则…，其二… on the one hand …on the other (hand)…， for one thing …for another … 换言之that is to say, in other words 即namely 如下as follows 特别是especially,in particular,particularly For one thig, it gives us many materials. For antoeher, it enables us to get in touch with more people. 首先，它给人们很多的资料。另外，它使得我们可以跟更多的人接触。 四、递进 另外what’s more, furthermore, moreover, besides, in addition,apart from, additonally 更糟糕的是what’s worse, worse still, to make matters worse 更重要的是more importantly 同样的likewise 更何况still less Furthermore, higher education is a big investment and so most students want to get all they can out of it. 此外，高等教育是一项重大的投资，所以大多数的学生都会竭尽所能，想从中得到一切。 并列 和and, as well as **不是… 而是…**not…but… 或者or **不是…就是…**either…or… **既不…也不…**neither …nor … **不仅…而且…**not only …but also … To accomplish great things, we must not only act but also dream. Not only plan,but also believe. 要成就一番事业，不仅要有行动，还要有梦想；不仅要有计划，还要有信念。 五、比较 与…相比 compared with, in contrast with 同样 similarly, likewise，identically, moreover 相反 conversely, on the contrary, contrary to, instead 同样重要equally important In contrast with figure skating and gymnastics, there are no subjective votes made by judges in swimming. 相比花样滑冰和体操，游泳比赛是不以主观投票决定结果的。 六、条件 如果 if, whether, as/so long as, on condition that, provided(that) 除非unless 万一， 假使in case (of) Provided (that)there is no objection, we shall hold the meeting here. 如果没有人反对，我们就在这里开会。 七、转折 但是but, yet, while, 相反on the contrary 否则otherwise 然而however, whereas, nevertheless She is slender,whereashe is stout. 她很瘦弱，而他却又粗又壮。 八、让步 虽然 although, though, even if, even though 尽管, 不管in spite of, despite 无论什么no matter how/what/who Despite their intentions and being in a strategic position, they often stop the progress being called for. 尽管他们的意图和存在是战略的关键位置，但是他们经常停止这一进程。 九、因果 由于, 因为 because, as, since, for, thanks to, due to, as a result of 因此 thus, therefore, consequently, so, hence, as a result/consequence, accordingly, for this reason You may have to change the password for these logins accordingly. 因此，您可能需要更改这些登录的密码。 时间顺序 起初at the beginning 此后then, later, after that, afterwards, since then 最终in the end, finally, eventually, at last 立刻immediately 同时meanwhile Since the reform in the late 1970s, the relative knowledge contribution to Chinese economic growth rose at the beginningthendropped later. 改革开放以来，中国经济增长中相对的知识贡献大致呈先上升后下降的变化趋势。 十、总结 简而言之 in brief, in short, in a nutshell 通常, 一般而言 in general, generally speaking 总而言之 to sum up, in conclusion, all in all, the whole,in a word, As discussed above In a word, they can do everything they like with money. ","date":"2023-01-12","objectID":"/zh-cn/ielts_writing_transition/:0:0","tags":["雅思阅读"],"title":"雅思写作过渡词","uri":"/zh-cn/ielts_writing_transition/"},{"categories":["雅思备考"],"content":"雅思阅读/听力评分表 听力做题步骤 读 猜 听 写 查 ","date":"2022-12-28","objectID":"/zh-cn/ielts_listening/:1:0","tags":["雅思听力"],"title":"雅思听力","uri":"/zh-cn/ielts_listening/"},{"categories":["雅思备考"],"content":"读 字数要求，选项要求 如果出现数字 写数字的单词形式 比如eleven 不要写11 ","date":"2022-12-28","objectID":"/zh-cn/ielts_listening/:2:0","tags":["雅思听力"],"title":"雅思听力","uri":"/zh-cn/ielts_listening/"},{"categories":["雅思备考"],"content":"读-猜 读：题目关键词，划关键词 猜：空格词性 大概的意思 ","date":"2022-12-28","objectID":"/zh-cn/ielts_listening/:3:0","tags":["雅思听力"],"title":"雅思听力","uri":"/zh-cn/ielts_listening/"},{"categories":["雅思备考"],"content":"听 听你刚刚划出来的关键词 填空题 都是同义词 ","date":"2022-12-28","objectID":"/zh-cn/ielts_listening/:4:0","tags":["雅思听力"],"title":"雅思听力","uri":"/zh-cn/ielts_listening/"},{"categories":["雅思备考"],"content":"写 长单词 简写 记辅音 environment=envrmt development=dvlpmt 需要大写的单词 物品的名字 学科：介词小写 Master of Teaching 机构/公司/学校/学院 Melbourance Graduate School of Education 书： The Power of Now 文化的名字 语言：Thai, Chinese 宗教：Buddhism 节目：Chinese New Year 星星：Mars 地名: Melbourne 国民：Australia 人的名字 国籍：Chinese 职位：Professor 称谓，人命：Mr.Miss, 时间的名字 月份，星期:December,Monday, 日期怎么写 March 22nd March 1st, March 2nd, March 3rd March 11th, March 12th, March 13th March 21st March 22nd March 23rd ","date":"2022-12-28","objectID":"/zh-cn/ielts_listening/:5:0","tags":["雅思听力"],"title":"雅思听力","uri":"/zh-cn/ielts_listening/"},{"categories":["雅思备考"],"content":"查 每个section之后不要检查 最后10分钟 检查： 大小写 字数限制（two word 不要写数字 选择题目 -对笔记答案 ","date":"2022-12-28","objectID":"/zh-cn/ielts_listening/:6:0","tags":["雅思听力"],"title":"雅思听力","uri":"/zh-cn/ielts_listening/"},{"categories":["雅思备考"],"content":"雅思阅读/听力评分表 FAST READING 阅读做题之前都要全文fast reading，然后对题目的关键词进行提取，和原文的关键词进行对应，然后选答案 读每个 段落的第一句，划核心名词 读第二句的第一个词，看看两个句的关系是不是三强（强转折however/neverthless B，强对比Unlike A,B，强因果 as a result of B， Because A,B，让步后面的部分although ..A,B）以上三强只读B，读完整；如果不是 就是顺承，提炼主语，直奔逗号/句号 其他句子和2一样 每个段落的标志词a 大写名词，提取首字母 b时间 c破折号 回顾本段耳朵逻辑结构 （如果可以写一个Note） ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:0:0","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"LIST OF HEADING 读第一句，第二句，最后一句，下段第一句 fast reading (the first thing you should do in any problem!) 把已有答案的一行标注掉 不看 划出list of heading 框框的keyword 每一个（名词 时间 大写字母提取首字母 破折号（复合词） 回到原文从第一段，按照快速阅读的⽅法，提炼逻辑主干将逻辑主干的kw，缩减到少于3个 带着核心词，回到list of heading 的框框 和每一个句子的kw对应 排除每一个句子 近义词对应 注意kw完全重现的情况，有陷阱 ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:1:0","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"fill in the blank fast reading 划题目kw 回到原文定位 在原文定位句子，找到空格答案，空格答案是原文的原词不能改写 ​ 答案位置基本都是按顺序出现的 不能改写原词！！！如果空格是句子的第一个单词 记得大写 ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:2:0","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"T_F_NG fast reading 划题目kw 定位：顺序扫描⽂章，根据每个段落的逻辑结构，找到对应段落－句⼦ 对应题目句子和原文句子kw 判断t/f/ng multiple choice fast reading 读选择题目的题干部分，划核心词 不要看选项 在原文找定位 找到定位 选择题目的答案，把选择题看成填空题目 带着原文的答案，排除选项 ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:3:0","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"Matching ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:4:0","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"type 1 句子在哪一段 和list of heading 题一样 fast reading 划出逻辑大纲 划出题目中的kw 定位：定位段落：根据原文段落逻辑大纲，判断句子可能出现的段落 定位句子：通过段落，定位到句子 ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:4:1","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"type2 人名，地名等大写字母：某人说了什么话？地点发生什么？ kw:读大写名词，一般在框框里，提取首字母 定位：分别定位每一个名词，一般定位N个地方 对应：读第一个定位的内容，划kw，和题目对应 判断：判断是否为同义词（list of heading ） 选出正确答案，再找下一个定位段落 进行步骤3 看题目中的 框框中的 下面的一个kw 进行步骤1-5 字母数量大于题干数量，字母一般就用一次，选过之后，排除。 ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:4:2","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"type3 句子A和句子B搭配 kw:哪一个部分句子少，划哪一个部分的kw,或者哪个部分有明显的大写 定位：回到原文 根据类型1 定位方法 进行 对应+判断：看没有划到kw的部分，根据类型2的方法进行排除 看下一个句子，重复1-3 ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:4:3","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"Multiple choice Fast reading 读选择题目的题干部分，划核心名词 在原文中定位 找到原文句子，选择题目中的答案 带着原文的答案，分别排除选项 ","date":"2022-12-24","objectID":"/zh-cn/ielts_reading/:5:0","tags":["雅思阅读"],"title":"雅思阅读","uri":"/zh-cn/ielts_reading/"},{"categories":["雅思备考"],"content":"Daily routine i get up at 8 am and wash up i have breakfast at 8:30am after breakfast i get dressed and go to the gym after working out , i take a shower, and go home at 12pm i have lunch after eating ,i swipe my phone then i take a nap i get up at 2pm then i start to do daily tasks i have dinner at 6 pm in the evening , i watch tv with my parents at 10 pm i go to sleep ","date":"2022-12-23","objectID":"/zh-cn/ielts_speaking/:1:0","tags":["雅思口语"],"title":"雅思口语","uri":"/zh-cn/ielts_speaking/"},{"categories":["雅思备考"],"content":"PART1 提升流利度的过渡词 反向IF whenever while/when Before/after compared to ","date":"2022-12-23","objectID":"/zh-cn/ielts_speaking/:2:0","tags":["雅思口语"],"title":"雅思口语","uri":"/zh-cn/ielts_speaking/"},{"categories":["雅思备考"],"content":"LIKE/DISLIKE LIKE 反向+ 反向+present+stress eg: Do you like doing exercise ? Yes, I am really into doing exercise, especially weight lifting. Actually,training 1 hour in the morning has become a very important part of my day because I tend to feel very calm and peaceful after training. If I miss a session,Ifind that it is very likely for me to experience distractions,stress or anxiety during the day. 反向+sleep Do you like doing exercise? Yes, I am really into doing exercise, especially weight lifting.One reason is that I find that early morning training helps me sleep more soundly than before. If I miss a session, I find that it takes me a longer time to fall asleep and after I get up I tend to feel very lethargic. 反向+focus Do you likelistening to music ? Yes, I really enjoy listening to music, especially while I am working, writing lesson plans or marketing copy becausemusiccan help me stay focused. If I don’t have the same song playing at the background,Ifind that it is very likely for me to get distracted or feel tired 反向+confidence Your parents, who do you like more ?Um.. wow .. that is a tough question I love both of them but if I had to pick one, I would say my dad Because my dad always encourages me to do whatever feels right for me rather than what is perceived to be right.However, if I ask my mum advice for something challenging or odd I want to try, her answer will always be a NO. 反向+healthy Do you like doing exercise ? Yes, I am really into doing exercise, especially weight lifting. Actually,training 1 hour in the morning has become a very important part of my day. It has helped me a lot in maintaining a lean body and staying away from illnesses. If I miss a training session,I find that it is very likely for me to feel tired in the afternoon 反向+efficient Do you like using mobile applications ? Yes, I really enjoy using mobile applications because they havemade my life more eficient than before For example, with the help of grab , a taxi booking application,Ican find a car in seconds. If it were not the help of this app, while+ while+present（+反向) while+focused（+反向） whenever +present whenever+focused whenever+present Before now + before however before now +present Do you like doing exercise ? Yes, I am really into doing exercise, especially weight liftingbecause I find that it helps me to cultivate a more peacefulmind. Actually I go to the gym everyday. I found that before I developed this habit,it wasvery easy for me to experience stress and anxiety. However, after I started to do exercise frequently,Ihave experienced more peace in my life. before now +focus Do you like listening to music ? Yes, I really enjoy listening to music because it helps me stay focused Actually, I listen to the same song while writing lesson plans everyday I found that before I developed this habit, it was very easy for me to feel distracted or run out of ideas. However, after I started playing the same song at work, I have been writing more productively than before. compared to + compared to efficient What is your favorite mode of transport ? If you are talking about Chiang Mai, which is my home now,Iwould say grab taxi. because it is less time consuming to travel by itcompared toother forms of transport like buses. compared to sleep whereas/in contrast whereas/in contrast -efficient whereas/in contrast whereas/in contrast -sleep DISLIKE 影响喜欢的 Do you like doing outdoor exercise ? No. I don’t do any outdoor exercise because I have found that it is very likely for me to get distracted when I do it, probably dueto the noise or burning sunshine. In contrast, if I do exercise indoors, like lifting weights, it is easyfor me to stay focused While lifting weights, I can feel a strong mind-muscleconnection, which helps me to cultivate a peaceful mind. 没有必要 Do you like giving others gifts ? Idont like giving people gifts because I find it unnecessary. To be honset, I dont think that giving a person a gifthasanything to dowith our relationship What really ","date":"2022-12-23","objectID":"/zh-cn/ielts_speaking/:2:1","tags":["雅思口语"],"title":"雅思口语","uri":"/zh-cn/ielts_speaking/"},{"categories":["雅思备考"],"content":"Describe there be +菜/home/可爱的家/ ","date":"2022-12-23","objectID":"/zh-cn/ielts_speaking/:2:2","tags":["雅思口语"],"title":"雅思口语","uri":"/zh-cn/ielts_speaking/"},{"categories":["雅思备考"],"content":"PART2 ","date":"2022-12-23","objectID":"/zh-cn/ielts_speaking/:3:0","tags":["雅思口语"],"title":"雅思口语","uri":"/zh-cn/ielts_speaking/"},{"categories":["雅思备考"],"content":"PART3","date":"2022-12-23","objectID":"/zh-cn/ielts_speaking/:4:0","tags":["雅思口语"],"title":"雅思口语","uri":"/zh-cn/ielts_speaking/"},{"categories":["雅思备考"],"content":"雅思写作步骤 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:0:0","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"作文步骤 Step 1 读最后1个句子,确定题目类型选择结构模版 判断a/d or both views Step 2 理解观点,确定段意 找到观点句,划名词,理解意思 翻译观点句,判断题目观点的类型根据生活经历,选择观点-确定段意 确定主旨大意 A/D 分为如下情况 A Rather than B : 反对 因为2个都对 Body 1: A 的独特好处 Body 2: B 的独特好处 (A不能提供的好处)\\ A是否合理(Should): 同意/反对/分类讨论 同意: Body 1: 好处 Body 2: 好处 反对: Body 1: 坏处 Body 2: 坏处 消失类: 同意/反对同意:Body 1: 有替代品,具备更好的功能;Body2:替代品很好获得反对:Body 1: 报纸,无可取代的好处; Body 2:报纸,无可取代的好处 BOTH VIEWS分为如下情况 2个观点,都同意 结尾: 我同意2个观点.因为2个方法有不同的好处如果做2个,可以让问题,更有效果的解决 2个观点,只能同意1个 结尾: .我认为有必要保护语言即使很少人会继续使用,保护语言也会对于了解这个民族的历史有帮助. （让步反驳 对应Body 2 ） 因为很多历史,都是只用某个民族的语言来记载的,如果研究历史的人可以理解这些语言,就可以了解这个名族过去的成功经验. 这些经验,也许对于我们现在的生活有帮助 （继续反驳） step3 使用技能二定Body段的结构 step4 使用技能三 书写逻辑 step5 使用语法和词组 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:1:0","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"技能一（结构与模板） Thinking Process 题目有几个问题（最后一句） 判断问题类型：(同时判断是考察 观点还是内容) Both view(两个观点都讨论) (OPINION)YES/NO/MIDDLE Agree/disagree (OPINION)YES/NO/MIDDLE why/solution why/trend (OPINION)YES/NO Positive/Negative trend (OPINION)YES/NO More pros than cons (OPINION)YES/NO problems/solution what…..e.g.qualitiesof journalists(具体的问题) the best way 选择什么观点 容易拿高分 定全文结构和主旨 非常重要 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:2:0","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"定开头和结尾 和观点 语法分析 句子功能 英文 改写观点1个 It is believed that +？ It is suggested／ believed that 存在2个互相矛盾的观点 There be There are conflicting views about .. This essay will discuss both sides of the argument, followed by my own perspective. 我同意,反对 I agree/disagree with this opinion. 不合适所有情况 because 的用法 I disagree with it because this suggestion is not suitable for all .. 我不同意这个观点 2个带来不同的好处 because 的用法 I disagree with this statement because each brings.. unique advantages. 我认为是好的trend I think that + ? 名词性从句 I think that this is a positive trend. 文章介绍原因和解决方法 定语从句/现在分词 被动语态 This essay will discuss factors contributing to / leading to / resulting in this problem, followed by suggestions to tackle/ deal with/ alleviate it. 为什么我认为是好的事情 名词性从句 This essay will discuss factors contributing to this trend and why I think this is a good thing. 这个观点/现象有 利大于弊端 词组 I believe that this suggestion would lead to / have more pros than cons. 那些支持..观点的人 可能有下面的论证 定语从句 现在分词 Those who support the idea of .. may present following arguments. 对于大部分人来说(词组) For most people, .. 那些支持..观点的人 也可以证明自己 定语从句 However, those who support the idea of ..can also justify their opinion. 但是,我们必须考虑 一些特殊情况 However, we have to consider one special case. 存在很多原因 There be There are several reasons. 为了 .. To 表目的 To improve the quality of life in urban areas, both individuals and the government need to take actions. 虽然..有效果, 但是效果不明显 While 表示让步 While it is undeniably that … 还有更好的方式解决问题 There are more effective ways to improve the safety on roads. For one thing, .. For another, .. 就像前面所提到的， 2个的好处不同 我认为2个都值得做 词组 As discussed above, as both A and B can bring different benefits, I think that both are worth of .. 他们可以带来互补的好处 词组 In my opinion, .. because they can bring complementary benefits. 每个人的情况都不同 词组 As discussed above, every one’s situation is different. Thus/therefore, this suggestion cannot bring benefits to all .. 有必要做某个事情 词组 As discussed above, it is necessary for because this can bring them several benefits. 写作分为下面两个题目in general ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:2:1","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"Agree/Disagree 开头功能 30-40字改写观点,给出观点 It is suggested／ believed that … I strongly agree with this statement. (同意） I strongly disagree with this statement. （反对） I’m afraid I have to disagree with this statement because there are special cases （分类讨论） Body1 功能 100字支持原因1 Body2 功能 100字支持原因2 ( 可以多写一个原因变成Body 3 然后每个Body 变成100字 ) 结尾功能 30-40个字1-2个句子 总结原因1和原因2 比较类 more… 中类：分类讨论 同意 事情的利弊/某些人应该做 利弊分析 不重要/被替代 不重要 有替代品具备同样的功能，甚至有更好的功能 替代品便宜，多 重要（unique benifits benifit 1 benifit 2 Only way Body1 让步反驳 承认有效 但是还会出现…问题 反驳 即使这种方法可以实现…，但是也有其他原因，所以有其他方法 免费，禁止 让步反驳 让步：承认可以达到目的 反驳:对于R影响很小 反驳：可能产生负面影响 同时这个政策 有一些弊端 Best Way 让步反驳 继续反驳 A导致C 分类讨论 最重要的是 承认重要 但是更重要的是 不可能做 方法一 regulations 方法二 educations 做某件事情是怎么样的 让步：承认 反驳：但是不是 继续反驳 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:2:2","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"Both Views 开头功能 There are conflicting views about .. （改写观点） 给出自己的观点 (可以省略) Body1 80-90个字 讨论A观点为什么是对的 1个原因 Those who support the idea that .. may present following arguments. Body2 80-90个字 讨论B观点为什么是对的 1个原因 However, those who support the idea that ..can also justify their opinion. 结尾的功能 40-60个字2-4句 给出自己的观点 解释自己的观点为什么合理 应该做/有问题 应该做，因为问题可以有很多方式减小 重要，浪费 限制vs自由 中间 A导致C 如何想到中立观点 对里面的名词或者动词，人或者国家分类讨论 Main benifits 中立 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:2:3","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"技能二 （两个段落模板） 定Body段的结构 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:3:0","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"1.A模板（没有准确的结论） 如果段落大意是 好处或者弊端 按照动作发生的顺序,推倒下1个动作 A\u003eB\u003eC\u003eD\u003eE 我们把这类的段落,叫做 A»\u003e 或者 利弊分析 ex 第1句: Unpaid community work 可以提高学生的社交技能 (最后写) 第2句: Unpaid community work 给了学生很多机会 接触不同年龄,职业,性格的人 （A） 第3句: 如果把这个活动变成高中教育的一部分,在这个过程中 ,学生就会意识到了社会上每个人的思想和行为都是不同的,并且学会尊重这种不同 （B） 第4句: 从而,学生就会学习学会站在别人的角度去思考问题 ,（C） 最终, 提高自己的社交技能 （D） 第1句: topic sentence 写最终的好处 （最后写） 第2句: A 第3句: B 第4句： C -D A 利弊分析-纵向if A-B 乖乖吃饭-身体好 B-C 身体好-心情好 C-D-E+F-G 心情好- 工作效率高-赚钱多+有钱买东西提高生活质量 A 利弊分析-对比By contrast只能说好处 Topic Sentence : A 很重要 乖乖吃饭很重要 -A 导致 -B, -C-D 如果小A经常吃垃圾食品并且节食 她就会经常生病, 甚至影响心情和工作效率 By contrast, By contrast A 导致 B, CD 如果小A 吃健康的食品,合理搭配 她就会身体好 甚至更开心,从而提高工作表现 三类让步反驳 ban-\u003e没有用 While…, …. 虽然禁止某个东西可能有好处 this cannot result in 但是好处并不明显 can still .. 因为人们还可以继续做… For example, they can .. 他们可以通过XYZ 方式做 Only way -\u003e没有用 While…, …. 虽然某个解决方法可能有效 this cannot result in 但是问题不能有效解决 can still .. 因为导致这个问题的原因还有 XYZ 即使执行了上面的方法, 问题也不会有效的解决 所以,需要找其他方法 Best way -\u003eSolution的弊端 While…, …. 虽然禁止某个东西可能有好处 。。。are unlikely to .. 但是好处并不明显 **** 因为这个solution 可能导致一些弊端 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:3:1","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"2. A-\u003eC模板（有准确的结论） 如果段落大意是 **bla bla bla (A) 导致 bla bla bla (C)**你需要论证的是 A怎么导致了C 类型： A-C ex 先具体解释观点中的C 第1句: 有些人认为 team sports 可以对 working life （C）好 Team work 怎么样,导致了C？ 第2句 A : team work … 最后1句 C: 帮助他们高效的完成工作 （解释C） 第1句: 有些人认为 team sports 可以对 working life 好 第2句: team sports 可以让小朋友学会如何与人有效的合作. 比如说: 怎么样根据自己的优势,分配角色; 怎么样清晰表达自己的观点; 发生不同观点的时候,如何解决 等 （A） 第3句: 因为,未来的工作中,他们肯定会有很多 projects 需要和同事一起完成 如果他们有了这些team work 的技能,就可以更有效的和同事合作 （B） 第4句: 帮助他们高效的完成工作 （C） A-C A导致C类 C是明确的 A的某个方面 导致了B moral value (A的某个方面)- 区分对错(B) …-C的某个方面 防止模仿社会的坏行为- 减少犯罪几率- 社会更安全 (C) R -原因类 首先提出原因 原因是B 我们购买太多东西 具体解释B : 什么东西 (A)导致了B (具体化) 为了便利,我们购买更多 canned foods S -解决方法类 首先提出明确的方法 我认为,政府应该… A 提高公众的意识 具体解释A 通过XYZ 做到A 小朋友应该在学校学习环保的知识, 并且成年人也应该take actions. 政府要通过…鼓励以上的行为 DT-责任类 目的是确定的 In order to 做X , 某个人需要做A 为了 be a good member 小朋友需要做.A.. 帮助某个人做A, 大家通常认为是B的责任 帮助小朋友这样做.A.. , 通常都是在家里面开始 而且大家都认为是家长的责任 B具体应该怎么做？ 家长应该做… JB=DT-职业类 职业是确定的 为了把C职业做好, 需要有品质B 为了做一个很好的leader 人们需要有B的品质 毫无疑问,A这群人拥有B品质 年轻人刚好有这个品质 这样的品质,可以帮他们做更好的C 这样的品质,可以让他们做更好的government Obligation（义务）（特殊） 应该回报回去 对我们自己也有好处 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:3:2","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"技能三（万能逻辑） 通过发生的核心词现象，连接到万能逻辑 进行拓展 寻找问题的核心词 万能逻辑连接如下 English keywords 中文逻辑 relate to others make or show a connection between. 什么是 sense of belonging 感觉自己是某个组织的一部分 所以,归属感必须是 对于某个人/某个群体的 你可以写 enhance my sense of belonging 考官可以根据 上下文 理解 你的belonging 是 belong to 哪个 group 的 但是 你的上下文 必须提到这个group 如果belonging 后面 没有写 to 哪些人 大部分人会认为 你在指代 belonging to your country 所以 如果你belong to your community/family 需要写清楚 identity: personal identity cultural identity belonging 表示 我们和其他人/组织 relate identity 可以理解成,我们和自己relate =我们的行为 relate to 我们的 意愿/喜好 personal identity: 代表“你是谁” 的“特征” ； 区别于其他人 the characteristics determining who or what a person or thing is 性格,工作, 价值观, 外表,习惯, 都可以体现你的personal identity personalities; profession/jobs; values; appearance (dress up style; look), habits,etc 这些identities 必须表达你自己的想法,不是别人的哦 These identities must express your own thoughts/values not others: cultural identity: part of personal identity; 代表“你的文化” 的“特征” ; 区别于其他文化 中国的cultural identities: 孔子/儒家 文化; 泰国的 佛教文化; 什么是 empathy 站在别人的角度思考问题 什么是 cohesion ? 1个组织里面的人 愿意合作 让这个组织变得更好 social cohesion 社会上的人 愿意互相合作 让社会变得更好 enhance cohesion in a company 公司里面的人 愿意互相合作 让社会变得更好 什么是 safety in a society ? 犯罪很少 什么是 self-esteem ? 你觉得自己 valued/ worthy (很有价值) 不会因为外在的事情,比如别人对你的评价或者自己的外表 觉得自己不如别人,或者很差 如果你的self-esteem 很高 别人说你很傻,你还是觉得自己很聪慧 不会觉得自己没有别人好看 不穿漂亮的衣服,名牌衣服=没有价值 说明你不需要 依赖 外在的东西 感觉到自己 有价值 如果你的self-esteem 很低 别人说你傻,你就会觉得自己傻 看到比自己强的人,你会觉得自己没有他们聪慧 别人穿名牌,你没有,你觉得他们比你好 说明,你 依赖外在的东西, 让自己感觉到, 自己很重要 (feel that you are valuable) 什么是 critical thinking ？ 有能力从不同的角度去分析问题 可以看到一个问题的 正反两面 什么是 efficient 做什么事情更快 e.g. 开车去学校vs骑自行车去学校 做什么事情不需要做某个环节了,导致 做这件事情更快了 online learning 的时候 不需要坐车上学了 什么是 economic growth 和 development ？ economic growth: increase in output and income economic development : increase in per capita (每个人的) output and income 雅思考试里面, 如果某些人收入变多/ 卖的产品多了/公司收入变多了 可以直接写 strengthen the economy /contribute to economic growth 也可以 经常用到的 疾病名称 和词组 传染病 呼吸道疾病:咳嗽,肺炎 脊椎病 视力不好 肥胖症/高血压/心脏病 提高/降低免疫力 增加/减少患病的几率 小朋友比成年人 更容易患 传染病 用fossil fuels air pollution unhealthy 如果某个活动需要依赖燃烧fossil fuels 会往空气里面释放有毒气体 造成空气质量变差 如果我们生活在空气不好的环境里面 我们就更容易患一些疾病 比如 咳嗽 甚至肺炎 树木吸收pollutant 降低 air pollution healthy 树木可以吸收污染物质 降低空气重的air pollution 减少我们 患一些疾病 比如 咳嗽 甚至肺炎 用fossil fuels global warming unhealthy 如果燃烧fossil fuels 还会大量的greenhouse gases 让全球气温增加 (global warming ) 👇就不是了 让海平面上升; 极端天气\u003e不适合动植物和人类的生存; 传染病 high risk activities (space/old buildings/dangerous sports ) - injury 如果我们参加一些 危险的活动: 去太空旅游; 危险运动e.g. 拳击/赛车等 我们很容易受伤 古建筑很容易倒塌,尤其是天气不好的时候 用fossil fuels sustainable development unhealthy 做某件事情依靠fossil fuels 并且 这个使用方式 没有限制 （汽车依靠 fossil fuels 并且使用 没有限制） 早晚有一天fossil fuels 会被用光 即使科学家们已经在研究很多可再生应能源\u003e 比如 风能;太阳能 但是利用这些能源的成本太高;并且很大程度依赖天气 TV/ computers unhealthy (视力下降; 脊柱不好; 小胖子 ) 视力下降 因为电脑,手机,ipad,电视的screens 对视力不好 如果我们经常使用这些电子产品 我们的视力很容易下降 如果小朋友长时间看电视,用电脑 他们很可能做在一个地方不同 但是,小朋友的骨骼还没有长好 这样的习惯可能会导致他们的脊柱发育不良 (spine disorders) 缺少physical activities unhealthy 如果我们不经常做physical activities (只要活动身体的,就叫做 physical activities, swimming; dancing etc ) 很有可能 免疫能力下降 心脏的能力下降 并且 增加体重 这样 会增加 患上很多疾病的机率, 比如 传染病,心脏病,高血压, 肥胖症等 healthy diet healthy 如果人们的饮食很有营养 就可以,提高人们的免疫能力 会减少 患上很多疾病的机率 如果人们吃的食物, 缺乏营养物质 就会很容易患上,某些疾病 e.g. 高脂肪的\u003e高血压/心脏病 如果人们吃过多食物,即使是 健康的食物 也会导致肥胖 肥胖不仅仅会增加患其他疾病的几率 e.g. 高血压/心脏病 也会降低人们的self-esteem 影响他们的social life 政府花钱,治疗疾病 healthy 为什么,政府需要花钱预防和治疗疾病 政府需要花钱,预防疾病: 宣传疾病预防的行为; 便宜的预防针 人们就可以,做好预防的措施 减少 患病的概率 同时,如果得病的人少了 未来,政府在医疗上面的花费也会减少 wellfare-economy 政府需要花钱,治疗疾病 因为很多疾病没有办法预防 比如 家族遗传病 还有一些疾病 即使可以预防 大部分人都不乖巧 不会采取预防措施 所以,政府需要花钱治疗疾病 公司研究的产品 well-being 公司做的研究, 研究出的产品 可能导致人们的well-being 不好 e.g. 研究武器; 研究减肥产品-虽然可以瘦,但对于身体不好 healthy 有一些疾病是家族遗传的 hereditary 如果我们了解了自己家庭的疾病历史 我们就可以采取一些预防措施 （冥想可以降低mental disorders） 从而,降低我们得病的几率 等我们有了孩子 还可以提高的意识-预防疾病的意识 past belonging belonging cohesive society \u0026 economy belonging obey laws 当我们对于自己国家, 过去人的思想和行为有深入的了解 (我们就会发现, 现在和过去有类似的地方 可以省略) 从而, 启发我们 relate our current life to the past (和过去人的生活联系) 增加我们对自己文化/国家的归属感 人们就会更愿意和这个国家的其他人合作 to make the society better 社会就会变得更加cohesive 并且 可能 可能促进经济的发展 同时 他们犯罪的可能性也会降低 增加safety exposures to differences accept the di","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:4:0","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"技能四 必备词组 通过句子记忆 Step1: 读英文,标记 verb+ noun 的搭配 e.g. rely on sth for ruel Step2 把英文 翻译成 中文 形式 类似 我的参考答案 就可以了 (参考答案,只是\"参考\",没有必要,和我一样) 按照 单词 出现的 顺序翻译 翻译 出来 每个单词的 语法功能 目的: 1. 你会更有意识,不同9个语法结构的功能 2. 这样的中文, 可以直接 翻译成7+句子 e.g. to do sth = 目的是 e.g. 如果有定语从句, 分开翻译 People who come from different cultures and economic statuses 人们, 来自不同文化 和经济背景的人 Vechicles rely on fossil fuels for fuel 汽车 依赖 fossil fuels 作为燃料 fossil fuels: 化石燃料 https://www.sciencedaily.com/terms/fossil_fuel.htm Providing heating and electricity to households usually requires burning fossil fuels. The operation of many factories require the burning of fossil fuels. 提供 供暖和供电 通常需要 燃烧 fossil fuels 很多工厂 都需要 燃烧 fossil fuels. Vehicles can emit/release/ produce pollutants / green house gasses into the air. 汽车 向空气中 排放 green house gases greenhouse gases: 温室气体 Gases that trap heat in the atmosphere are called greenhouse gases. https://www.epa.gov/ghgemissions/overview-greenhouse-gases An increasing number of vehicles has been deteriorating air quality/increasing air pollution. 越来越多的 车辆 一直在让 空气污染恶化 Living in an environment with a lot of pollution increases our risk of catching illnesses such as coughing, skin allergies, and headaches. 住在一个 有污染的 环境 增加 得病的 危险 这些病 包括 咳嗽 皮肤过敏 头疼 There is a large amount of water (uncountable) I have a large amount of money/time. (uncountable) There is an exessive amount of junk food (uncountable) There is a great deal of money/water/time (uncountable) There are a large number of people / students (countable, plural nouns) plenty of : (理解即可 雅思写作 很少用) enough and more. It is used before singular uncountable and plural nouns. Plenty of shops accept credit cards. 这里 有很多 水 我 有很多钱/时间 这里 有 过多的 垃圾食品 这里有 很多 人/学生 Global warming has been increasing the global temperature. Global warming (全球气候 变暖) 一直都在增加 全球的 气温 Global warming has raised the sea levels. Global warming has led to the rise of sea levels. Global warming 已经导致 海平面的 上升 Global warming has lead to more extreme weather conditions such as storms, floods, volcanic explosions, hurricanes. Global warming 已经导致 更多的 极端天气情况 这个情况包括 暴风 洪水 火山爆发 龙卷风等 Global warming has led to the spread of infectious illnesses. Global warming 已经导致了 传染病 的传播 Trees can absorb pollutants. 树木 可以 吸收 污染物 Old buildings are very likely to collapse under extreme weather such as storm, and snow. Old buildings are very vulnerable under extreme weather. 老的建筑物 很容易 坍塌 在极端天气情况的时候 坍塌 vulnerable: 容易受到 physical or emotional attack or harm. If we do not impose any restrictions on the usage of vehicles, traffic congestion and air pollution will deteriorate. 如果 我们 不限制 汽车的使用 交通拥堵 和 空气污染 都会恶化 Fossil fuels are non-renewable sources of energy, so sooner or later, they will be exhausted. Fossil Fuels 是不可再生 能源 迟早, 他们会 被用完 (没有了) Solar and wind energies are renewable, so they can sustainably provide us enough energy for our daily use. 太阳和风 能 是可以再生的 所以,他们 可以 持续 给我们 每天的用途 提供能源 The cost of developing new sources of energy such as solar and wind energies is very high/ is extremely/exorbitantly high. 开发新能源 的 成本 很高 这些新能源包括 太阳能 和 风能 If we work on one task for an extended period of time, we may feel bored. 如果 我们 做一件事情 持续很长时间 我们 很容易 感到 无聊 If we stare at the screen for an extended period of time, our eyes may feel tired, and if we watch TV,use mobile phones or ipad frequently, such activities will be detrimental to our vision. 如果我们 盯着屏幕, 看很长时间 我们的眼睛 很可能 觉得 很疲惫 并且 如果 我们 看电视 用手机 ipad 总是很频繁 这样的活动 会对 我们的 视力不好 While we are watching TV, most people like sitting there in one position. 当 我们 正在 看电视 的时候 大部分人 喜欢 在一个位置 坐着 Children are at the critical stage of bone formation. 还在 正 处在一个 很关键的 阶段 一个关键的 骨骼形成 的阶段 Children are more vulnerable than adults to environmental risks such as air pollution. Children are particularly vulnerable to environmental risks such as air pollution. Children are more vulnerable than adults to violence from the media. 小朋友 比 成年人 更容易 在 受到 环境risks 的影响, 这个risk 包括 空气污染 (小朋友在污染的 环境里面,很容易生病) 小朋友 比 成年人 更容易 在 受到 媒体上面 暴力画面 的影响 suffer from/develop diseases/disorders/catch illnesses ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:5:0","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"小作文 structure ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:6:0","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"动态图 ➢Two types of structures （ 多⽤于动态图：有时间的） Structure 1: 8 S Introduction: 1S-2S （ 改写题） Body 1: a\u003eb\u003ec 3S (纵向比较） Body 2: same trend….By contrast, same trend 3S (横向⽐较） Conclusion: 1S -2S （ 整体趋势） Structure 2: 8 S Introduction: 1S -2S （ 改写） Body 1: same trend (a\u003eb\u003ec) （ 横向同趋势＋纵向⽐较） Body 2: By contrast, same trend （ 横向相反趋势＋纵向⽐较） Conclusion: 1S-2S （ 整体趋势） 2 types of graphs: Type 1 : graphs with time Structure 1 or Structure 2 ( Example, Line) Type 2: graphs without time Structure 1 ( Example, Table) ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:6:1","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"表格 每列数据之间没有相关性 同列⽐⼤⼩，（不同列⽐较位置） 同列数据：最⼤值，最⼩值，中间项 **First column：a1\u003eb1\u003ec1 ( **⽐⼤⼩） Second column: a2\u003eb2\u003ec2 ( a1//a2 ⽐位置） Third column: a3\u003eb3\u003ec3 ( a2//a3 ⽐位置） 每列数据之间有相关性 Body1: 整体⽐较每列数值 Body 2-Body 3/4: 同列⽐⼤⼩，（不同列⽐较位置） ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:6:2","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"地图 根据地图进行分段 现在和将来分B1 AND B2 第一个和第二个分B1 AND B2 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:6:3","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":["雅思备考"],"content":"流程图 根据流程先后进行分段 ","date":"2022-12-12","objectID":"/zh-cn/ielts_writing/:6:4","tags":["雅思写作"],"title":"雅思写作","uri":"/zh-cn/ielts_writing/"},{"categories":null,"content":"关于我","date":"0001-01-01","objectID":"/zh-cn/about/","tags":null,"title":"关于我","uri":"/zh-cn/about/"},{"categories":null,"content":"个人介绍 普通中国理工科大学生 学习数学，计算机，英语中 喜欢自由,所以我不想让任何人阻止我追梦的脚步 喜欢一些数码产品，希望成为一名极客 不是肥宅，也不想成为肥宅，喜欢运动，健身（增肌），篮球，还有一些有氧运动 比如游泳和跑步 未完待续 ","date":"0001-01-01","objectID":"/zh-cn/about/:0:0","tags":null,"title":"关于我","uri":"/zh-cn/about/"}]