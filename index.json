[{"categories":["计算机"],"content":"CPP万能头 #include\u003cbits/stdc++.h\u003e using namespace std; int main(){ return 0 ; } ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:1:0","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"C/C++ %s %d %u 基本用法 %d 十进制有符号整数 %u 十进制 %f 浮点数 %s 字符串 %c 单个字符 %p 指针的值 %e 指数形式的浮点数 %x, %X 无符号以十六进制表示的整数 %0 无符号以八进制表示的整数 %g 自动选择合适的表示法 可以在\"%“和字母之间加小写字母l, 表示输出的是长型数。 %ld 表示输出long整数 %lf 表示输出double浮点数 可以在”%“和字母之间插进数字表示最大场宽。 例如: %3d 表示输出3位整型数, 不够3位右对齐。 %9.2f 表示输出场宽为9的浮点数, 其中小数位为2, 整数位为6, 小数点占一位, 不够9位右对齐。 %8s 表示输出8个字符的字符串, 不够8个字符右对齐。 如果字符串的长度、或整型数位数超过说明的场宽, 将按其实际长度输出。 但对浮点数, 若整数部分位数超过了说明的整数位宽度, 将按实际整数位输出; 若小数部分位数超过了说明的小数位宽度, 则按说明的宽度以四舍五入输出。 另外, 若想在输出值前加一些0, 就应在场宽项前加个0。 例如: %04d 表示在输出一个小于4位的数值时, 将在前面补0使其总宽度为4位。 如果用浮点数表示字符或整型量的输出格式, 小数点后的数字代表最大宽度, 小数点前的数字代表最小宽度。 例如: %6.9s 表示显示一个长度不小于6且不大于9的字符串。若大于9, 则第9个字符以后的内容将被删除。 可以控制输出左对齐或右对齐, 即在”%“和字母之间加入一个”-\" 号可说明输出为左对齐, 否则为右对齐。 例如: %-7d 表示输出7位整数左对齐 %-10s 表示输出10个字符左对齐 ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:2:0","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"迭代器对容器进行遍历 迭代器是一种检查容器内元素并遍历元素的数据类型，通常用于对C++中各种容器内元素的访问，但不同的容器有不同的迭代器，初学者可以将迭代器理解为指针 因为也是使用*进行访问。 ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:3:0","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"vector迭代器 #include\u003cbits/stdc++.h\u003e using namespace std; // 万能头 int main(){ vector\u003cint\u003e vtr; vtr.push_back(1); vtr.push_back(2); vtr.push_back(4); vtr.push_back(6); vector\u003cint\u003e:: iterator it; for ( it = vtr.begin(); it !=vtr.end(); it++) { cout\u003c\u003c*it\u003c\u003c\" \"; } return 0; } 输出 1 2 4 6 ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:3:1","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"字符串常用函数 String string.find(string a ,pos),a 是子字符串，pos是查找开始的位置 string.length() string.strsub(int start,int length) start 是字符串开始的位置，length是子字符串的长度 ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:4:0","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"set 使用迭代器进行遍历输出 set\u003cstring\u003e country; country.insert(\"China\"); country.insert(\"America\"); country.insert(\"Canada\"); country.insert(\"Canada\"); for (set\u003cstring\u003e:: iterator it = begin(country) ; it!= country.end(); it++) { cout\u003c\u003c*it\u003c\u003c\" \"; } cout\u003c\u003cendl; country.erase(\"American\"); if(!country.count(\"American\")){ cout\u003c\u003c\"Can't find American\"\u003c\u003cendl; } ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:4:1","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"多组输入 ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:0","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"C #include \u003cbits/stdc++.h\u003e using namespace std; int main() { int a, b; while (scanf(\"%d%d\", \u0026a, \u0026b) != EOF) { printf(\"%d\\n\", a+b); } return 0; } 一个多组输入的例子 double a; while (scanf(\"%lf\", \u0026a) != EOF) { if (a \u003c 1000) { // 使用%g可以除去小数点后面多余的0 如果是整数的话 显示整数 printf(\"discount=1,pay=%g\\n\", a); } if (a \u003e= 1000 \u0026\u0026 a \u003c 2000) { printf(\"discount=0.95,pay=%g\\n\", a * 0.95); } if (a \u003e= 2000 \u0026\u0026 a \u003c 3000) { printf(\"discount=0.9,pay=%g\\n\", a * 0.9); } if (a \u003e= 3000 \u0026\u0026 a \u003c 5000) { printf(\"discount=0.85,pay=%g\\n\", a * 0.85); } if (a \u003e= 5000) { printf(\"discount=0.8,pay=%g\\n\", a * 0.8); } } ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:1","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"CPP #include \u003cbits/stdc++.h\u003e using namespace std; int main() { int a, b; while (cin \u003e\u003e a \u003e\u003e b) { cout \u003c\u003c a + b \u003c\u003c endl; } return 0; } ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:2","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"Java Scanner stdin = new Scanner(System.in); while (stdin.hasNext()) { String s = stdin.next(); int n = stdin.nextInt(); double b = stdin.nextDouble(); } ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:3","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["计算机"],"content":"Python while True: try: a, b = map(int, input().split()) c = a+b print(c) except: #读到文件末尾抛出异常结束循环 break ","date":"2023-07-05","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/:5:4","tags":["机考"],"title":"机考笔记","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%BA%E8%80%83%E7%AC%94%E8%AE%B0/"},{"categories":["life"],"content":"Nanhu Park ","date":"2023-03-19","objectID":"/free_time/:0:0","tags":["walk_around"],"title":"Free_time","uri":"/free_time/"},{"categories":["CPP"],"content":"Output std::cout« you can add many cout objects as you want, but it does not insert a new line at the end of the output \\n will create a new line: #include \u003ciostream\u003e // iostream is a header file library // lets us work with i/o objects int main(){ std::cout\u003c\u003c\"hello world!\"\u003c\u003c\"\\n\"; return 0; //return 0 ends the main function. } you can use namespace std and you can directly use “cout” to print you contents the code is below #include \u003ciostream\u003e using namespace std; int main(){ cout\u003c\u003c\"hello world\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:1:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Variables have the same types of variables with JAVA int double char string bool #include \u003ciostream\u003e using namespace std; int main() { int age = 20; string name = \"zhouxingyu\"; cout \u003c\u003c \"i am\" \u003c\u003c name \u003c\u003c '\\n'; cout \u003c\u003c \" i am \" \u003c\u003c age \u003c\u003c \" years old\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:2:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Multiple Variables int x,y,z; all cpp variables must be identified with unique names Names cannot contain whitespaces or special characters like ! # % ","date":"2022-12-31","objectID":"/cpp/:2:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Input cout is pronounced “see out” Used for output and uses the insertion operator(«) cin is pronounced “see in” use the extraction operator » ","date":"2022-12-31","objectID":"/cpp/:3:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Data Types int myNum = 5; // Integer (whole number) float myFloatNum = 5.99; // Floating point number double myDoubleNum = 9.98; // Floating point number char myLetter = ‘D’; // Character bool myBoolean = true; // Boolean string myText = “Hello”; // String ","date":"2022-12-31","objectID":"/cpp/:4:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Operators the same with JAVA ","date":"2022-12-31","objectID":"/cpp/:5:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"string string a = \"hello \"; string b = \"world\"; string c = a.append(b); string d = a + b; cout \u003c\u003c c; a+b is equal to append ","date":"2022-12-31","objectID":"/cpp/:6:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Conditions the same with Java IF ELSE ELSE IF SWITCH variable = (condition)?expressionTrue:expresionFalse ","date":"2022-12-31","objectID":"/cpp/:7:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Structures give a name to the structure ,and treat it a date type #include \u003ciostream\u003e using namespace std; int main() { struct test { /* data */ int NO; string name; } student1, student2; student1.name = \"Leonard\"; student1.NO = 1; student2.name = \"Stark\"; student2.NO = 2; cout\u003c\u003cstudent1.NO\u003c\u003c\" \"\u003c\u003cstudent1.name\u003c\u003cendl; cout\u003c\u003cstudent2.NO\u003c\u003c \" \"\u003c\u003cstudent2.name; } ","date":"2022-12-31","objectID":"/cpp/:8:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"References we can use either the variable name “test” to refer to the name string name = \"Leo\"; string \u0026test = name; cout\u003c\u003ctest; ","date":"2022-12-31","objectID":"/cpp/:9:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Memory address \u0026 was used to create a reference variable,But it can also be used to get the memory address of a variable which is the location of where the variable is stored on the computer. string name = \"Leo\"; cout\u003c\u003c\u0026name; memory address is very important ,references and pointers are two features that make c++ stand out from other programming languages just like Python and Java; ","date":"2022-12-31","objectID":"/cpp/:10:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Pointers ","date":"2022-12-31","objectID":"/cpp/:11:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"create pointer is a variable that stores the memory address as its value. Even though we can declare ptr in three ways,I prefer the first one,it can make us more clear string* ptr; string * ptr; string *ptr; string food = \"pizza\"; string* ptr = \u0026food; cout\u003c\u003cptr\u003c\u003cendl; cout\u003c\u003c\u0026food; ptr and \u0026food have the same output ","date":"2022-12-31","objectID":"/cpp/:11:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Dereference Get Memory Address and Value in the previous chapter we said we could use ***** to get the memory address of a variable.However, we can use this operator to get the value of the variable. ","date":"2022-12-31","objectID":"/cpp/:11:2","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Modify Pointers we can change the pointer value. string food = \"pizza\"; string* ptr = \u0026food; cout\u003c\u003cfood\u003c\u003cendl; cout\u003c\u003c*ptr\u003c\u003cendl; *ptr = \"apple\"; cout\u003c\u003c*ptr\u003c\u003cendl; ","date":"2022-12-31","objectID":"/cpp/:11:3","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Function void test(){ cout\u003c\u003c\"test function\"; } int main() { test(); } if a user-defined function is declared after the main() function,an error will occur. its feature makes cpp different from java/python ","date":"2022-12-31","objectID":"/cpp/:12:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Pass by Reference when you need to change the value of arguments ,you can use reference, directly control the address of variables whether or not inside the function void swapNums(int \u0026x, int \u0026y) { int z = x; x = y; y = z; cout\u003c\u003c\"X memory address\"\u003c\u003c\u0026x\u003c\u003c'\\n'; cout\u003c\u003c\"Y memory address\"\u003c\u003c\u0026y\u003c\u003c'\\n'; } int main() { int x =10; int y =20; swapNums(x,y); cout\u003c\u003c\u0026x\u003c\u003cendl; cout\u003c\u003c\u0026y\u003c\u003cendl; } ","date":"2022-12-31","objectID":"/cpp/:12:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Arrays pass arrays to a function void myFunction(int myNumbers[5]) { for (int i = 0; i \u003c 5; i++) { cout \u003c\u003c myNumbers[i] \u003c\u003c \"\\n\"; } } int main() { int myNumbers[5] = {10, 20, 30, 40, 50}; myFunction(myNumbers); return 0; } ","date":"2022-12-31","objectID":"/cpp/:12:2","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Recursion int sum(int k) { if (k \u003e 0) { /* code */ return k + sum(k - 1); } else { return 0; } } int main() { int result = sum(100); cout \u003c\u003c result; } the program follows these steps 10 + sum(9) 10 + ( 9 + sum(8) ) 10 + ( 9 + ( 8 + sum(7) ) ) … 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0) 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0 ","date":"2022-12-31","objectID":"/cpp/:12:3","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Classes class myClass { public: int no; string name; }; int main() { myClass myclass; myclass.name = \"Leonard Chow\"; myclass.no = 20; } ","date":"2022-12-31","objectID":"/cpp/:13:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Constructor Parameter class Car { // The class public: // Access specifier string brand; // Attribute string model; // Attribute int year; // Attribute Car(string x, string y, int z) { // Constructor with parameters brand = x; model = y; year = z; } }; int main() { // Create Car objects and call the constructor with different values Car carObj1(\"BMW\", \"X5\", 1999); Car carObj2(\"Ford\", \"Mustang\", 1969); // Print values cout \u003c\u003c carObj1.brand \u003c\u003c \" \" \u003c\u003c carObj1.model \u003c\u003c \" \" \u003c\u003c carObj1.year \u003c\u003c \"\\n\"; cout \u003c\u003c carObj2.brand \u003c\u003c \" \" \u003c\u003c carObj2.model \u003c\u003c \" \" \u003c\u003c carObj2.year \u003c\u003c \"\\n\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:13:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Access Specifiers public –members are accessible from outside the class private –members cannot be accessed from outside the class protected –member cannot be accessed from outside the class, however, they can be accessed in inherited classes. You will learn more about Inheritance later. class MyClass { public: // Public access specifier int x; // Public attribute private: // Private access specifier int y; // Private attribute }; int main() { MyClass myObj; myObj.x = 25; // Allowed (public) myObj.y = 50; // Not allowed (private) return 0; } if you try to access to private member ,an erroe occurs error: y is private ","date":"2022-12-31","objectID":"/cpp/:13:2","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Encapsulation we should make sure that “sensitive \" data is hidden from users, To achieve this ,we must declare class variables/attributes as private(cannot be accessed from the outside class).Then we should provide getter and setter methods class Employee { private: // Private attribute int salary; public: // Setter void setSalary(int s) { salary = s; } // Getter int getSalary() { return salary; } }; ","date":"2022-12-31","objectID":"/cpp/:13:3","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Inheritance To inherit from a class,use the : symbol // Base class class Vehicle { public: string brand = \"Ford\"; void honk() { cout \u003c\u003c \"Tuut, tuut! \\n\" ; } }; // Derived class class Car: public Vehicle { public: string model = \"Mustang\"; }; int main() { Car myCar; myCar.honk(); cout \u003c\u003c myCar.brand + \" \" + myCar.model; return 0; } Multilevel Inheritance // Base class (parent) class MyClass { public: void myFunction() { cout \u003c\u003c \"Some content in parent class.\" ; } }; // Derived class (child) class MyChild: public MyClass { }; // Derived class (grandchild) class MyGrandChild: public MyChild { }; int main() { MyGrandChild myObj; myObj.myFunction(); return 0; } OR // Base class class MyClass { public: void myFunction() { cout \u003c\u003c \"Some content in parent class.\" ; } }; // Another base class class MyOtherClass { public: void myOtherFunction() { cout \u003c\u003c \"Some content in another class.\" ; } }; // Derived class class MyChildClass: public MyClass, public MyOtherClass { }; int main() { MyChildClass myObj; myObj.myFunction(); myObj.myOtherFunction(); return 0; } Access Specifiers used protected which is similar to private, but it can be accessed in the inherited class. // Base class class Employee { protected: // Protected access specifier int salary; }; // Derived class class Programmer: public Employee { public: int bonus; void setSalary(int s) { salary = s; } int getSalary() { return salary; } }; int main() { Programmer myObj; myObj.setSalary(50000); myObj.bonus = 15000; cout \u003c\u003c \"Salary: \" \u003c\u003c myObj.getSalary() \u003c\u003c \"\\n\"; cout \u003c\u003c \"Bonus: \" \u003c\u003c myObj.bonus \u003c\u003c \"\\n\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:13:4","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Files #include\u003ciostream\u003e #include\u003cfstream\u003e ofstream — create and write to files ifstream – Reads from files fstream – A combination of ofstream and ifstream: create read write to files Create and write to a file #include\u003ciostream\u003e #include\u003cfstream\u003e using namespace std; int main(){ ofstream Myfile(\"test.txt\"); Myfile \u003c\u003c\"stay hungery and stay foolish!\"; Myfile.close(); return 0; } Read a file int main(){ string myText; ifstream MyreadFile(\"test.txt\"); while (getline(MyreadFile,myText)) { /* code */ cout\u003c\u003cmyText\u003c\u003cendl; } MyreadFile.close(); } ","date":"2022-12-31","objectID":"/cpp/:13:5","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Exceptions three keyword :try throw catch we use try block to test code if we throw the exception throw keyword to output a reference number try { int age = 5; if (age \u003e= 18) { cout \u003c\u003c \"Access granted - you are old enough.\"; } else { throw(age); } } catch (int myNum) { cout \u003c\u003c \"Access denied - You must be at least 18 years old.\\n\"; cout \u003c\u003c \"Age is: \" \u003c\u003c myNum; } in catch block we can use a reference number we throwed;if we don’t know what type we use ,we can use the “three dots” inside the catch block just like this catch (...){ // code } ","date":"2022-12-31","objectID":"/cpp/:13:6","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":null,"content":"About me","date":"0001-01-01","objectID":"/about/","tags":null,"title":"About myself","uri":"/about/"},{"categories":null,"content":"Introduce myself A common Chinese university student majored in Industrial AI I am studying Mathematics, Computer Science, and English(and i want to learn other languages) I like freedom, so I don’t let anyone deter me from chasing my dream! I like digital products, and I want to be a geek. I am not a fat geek and don’t want to be fat, so I like sports, working out (muscle building), basketball, and aerobic exercise like swimming and running. Maybe I will add something more one day… ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About myself","uri":"/about/"}]