[{"categories":["CPP"],"content":"Output std::cout« you can add many cout objects as you want, but it does not insert a new line at the end of the output \\n will create a new line: #include \u003ciostream\u003e // iostream is a header file library // lets us work with i/o objects int main(){ std::cout\u003c\u003c\"hello world!\"\u003c\u003c\"\\n\"; return 0; //return 0 ends the main function. } you can use namespace std and you can directly use “cout” to print you contents the code is below #include \u003ciostream\u003e using namespace std; int main(){ cout\u003c\u003c\"hello world\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:1:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Variables have the same types of variables with JAVA int double char string bool #include \u003ciostream\u003e using namespace std; int main() { int age = 20; string name = \"zhouxingyu\"; cout \u003c\u003c \"i am\" \u003c\u003c name \u003c\u003c '\\n'; cout \u003c\u003c \" i am \" \u003c\u003c age \u003c\u003c \" years old\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:2:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Multiple Variables int x,y,z; all cpp variables must be identified with unique names Names cannot contain whitespaces or special characters like ! # % ","date":"2022-12-31","objectID":"/cpp/:2:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Input cout is pronounced “see out” Used for output and uses the insertion operator(«) cin is pronounced “see in” use the extraction operator » ","date":"2022-12-31","objectID":"/cpp/:3:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Data Types int myNum = 5; // Integer (whole number) float myFloatNum = 5.99; // Floating point number double myDoubleNum = 9.98; // Floating point number char myLetter = ‘D’; // Character bool myBoolean = true; // Boolean string myText = “Hello”; // String ","date":"2022-12-31","objectID":"/cpp/:4:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Operators the same with JAVA ","date":"2022-12-31","objectID":"/cpp/:5:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"string string a = \"hello \"; string b = \"world\"; string c = a.append(b); string d = a + b; cout \u003c\u003c c; a+b is equal to append ","date":"2022-12-31","objectID":"/cpp/:6:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Conditions the same with Java IF ELSE ELSE IF SWITCH variable = (condition)?expressionTrue:expresionFalse ","date":"2022-12-31","objectID":"/cpp/:7:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Structures give a name to the structure ,and treat it a date type #include \u003ciostream\u003e using namespace std; int main() { struct test { /* data */ int NO; string name; } student1, student2; student1.name = \"Leonard\"; student1.NO = 1; student2.name = \"Stark\"; student2.NO = 2; cout\u003c\u003cstudent1.NO\u003c\u003c\" \"\u003c\u003cstudent1.name\u003c\u003cendl; cout\u003c\u003cstudent2.NO\u003c\u003c \" \"\u003c\u003cstudent2.name; } ","date":"2022-12-31","objectID":"/cpp/:8:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"References we can use either the variable name “test” to refer to the name string name = \"Leo\"; string \u0026test = name; cout\u003c\u003ctest; ","date":"2022-12-31","objectID":"/cpp/:9:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Memory address \u0026 was used to create a reference variable,But it can also be used to get the memory address of a variable which is the location of where the variable is stored on the computer. string name = \"Leo\"; cout\u003c\u003c\u0026name; memory address is very important ,references and pointers are two features that make c++ stand out from other programming languages just like Python and Java; ","date":"2022-12-31","objectID":"/cpp/:10:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Pointers ","date":"2022-12-31","objectID":"/cpp/:11:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"create pointer is a variable that stores the memory address as its value. Even though we can declare ptr in three ways,I prefer the first one,it can make us more clear string* ptr; string * ptr; string *ptr; string food = \"pizza\"; string* ptr = \u0026food; cout\u003c\u003cptr\u003c\u003cendl; cout\u003c\u003c\u0026food; ptr and \u0026food have the same output ","date":"2022-12-31","objectID":"/cpp/:11:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Dereference Get Memory Address and Value in the previous chapter we said we could use ***** to get the memory address of a variable.However, we can use this operator to get the value of the variable. ","date":"2022-12-31","objectID":"/cpp/:11:2","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Modify Pointers we can change the pointer value. string food = \"pizza\"; string* ptr = \u0026food; cout\u003c\u003cfood\u003c\u003cendl; cout\u003c\u003c*ptr\u003c\u003cendl; *ptr = \"apple\"; cout\u003c\u003c*ptr\u003c\u003cendl; ","date":"2022-12-31","objectID":"/cpp/:11:3","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Function void test(){ cout\u003c\u003c\"test function\"; } int main() { test(); } if a user-defined function is declared after the main() function,an error will occur. its feature makes cpp different from java/python ","date":"2022-12-31","objectID":"/cpp/:12:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Pass by Reference when you need to change the value of arguments ,you can use reference, directly control the address of variables whether or not inside the function void swapNums(int \u0026x, int \u0026y) { int z = x; x = y; y = z; cout\u003c\u003c\"X memory address\"\u003c\u003c\u0026x\u003c\u003c'\\n'; cout\u003c\u003c\"Y memory address\"\u003c\u003c\u0026y\u003c\u003c'\\n'; } int main() { int x =10; int y =20; swapNums(x,y); cout\u003c\u003c\u0026x\u003c\u003cendl; cout\u003c\u003c\u0026y\u003c\u003cendl; } ","date":"2022-12-31","objectID":"/cpp/:12:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Arrays pass arrays to a function void myFunction(int myNumbers[5]) { for (int i = 0; i \u003c 5; i++) { cout \u003c\u003c myNumbers[i] \u003c\u003c \"\\n\"; } } int main() { int myNumbers[5] = {10, 20, 30, 40, 50}; myFunction(myNumbers); return 0; } ","date":"2022-12-31","objectID":"/cpp/:12:2","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Recursion int sum(int k) { if (k \u003e 0) { /* code */ return k + sum(k - 1); } else { return 0; } } int main() { int result = sum(100); cout \u003c\u003c result; } the program follows these steps 10 + sum(9) 10 + ( 9 + sum(8) ) 10 + ( 9 + ( 8 + sum(7) ) ) … 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0) 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0 ","date":"2022-12-31","objectID":"/cpp/:12:3","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Classes class myClass { public: int no; string name; }; int main() { myClass myclass; myclass.name = \"Leonard Chow\"; myclass.no = 20; } ","date":"2022-12-31","objectID":"/cpp/:13:0","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Constructor Parameter class Car { // The class public: // Access specifier string brand; // Attribute string model; // Attribute int year; // Attribute Car(string x, string y, int z) { // Constructor with parameters brand = x; model = y; year = z; } }; int main() { // Create Car objects and call the constructor with different values Car carObj1(\"BMW\", \"X5\", 1999); Car carObj2(\"Ford\", \"Mustang\", 1969); // Print values cout \u003c\u003c carObj1.brand \u003c\u003c \" \" \u003c\u003c carObj1.model \u003c\u003c \" \" \u003c\u003c carObj1.year \u003c\u003c \"\\n\"; cout \u003c\u003c carObj2.brand \u003c\u003c \" \" \u003c\u003c carObj2.model \u003c\u003c \" \" \u003c\u003c carObj2.year \u003c\u003c \"\\n\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:13:1","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Access Specifiers public –members are accessible from outside the class private –members cannot be accessed from outside the class protected –member cannot be accessed from outside the class, however, they can be accessed in inherited classes. You will learn more about Inheritance later. class MyClass { public: // Public access specifier int x; // Public attribute private: // Private access specifier int y; // Private attribute }; int main() { MyClass myObj; myObj.x = 25; // Allowed (public) myObj.y = 50; // Not allowed (private) return 0; } if you try to access to private member ,an erroe occurs error: y is private ","date":"2022-12-31","objectID":"/cpp/:13:2","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Encapsulation we should make sure that “sensitive \" data is hidden from users, To achieve this ,we must declare class variables/attributes as private(cannot be accessed from the outside class).Then we should provide getter and setter methods class Employee { private: // Private attribute int salary; public: // Setter void setSalary(int s) { salary = s; } // Getter int getSalary() { return salary; } }; ","date":"2022-12-31","objectID":"/cpp/:13:3","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Inheritance To inherit from a class,use the : symbol // Base class class Vehicle { public: string brand = \"Ford\"; void honk() { cout \u003c\u003c \"Tuut, tuut! \\n\" ; } }; // Derived class class Car: public Vehicle { public: string model = \"Mustang\"; }; int main() { Car myCar; myCar.honk(); cout \u003c\u003c myCar.brand + \" \" + myCar.model; return 0; } Multilevel Inheritance // Base class (parent) class MyClass { public: void myFunction() { cout \u003c\u003c \"Some content in parent class.\" ; } }; // Derived class (child) class MyChild: public MyClass { }; // Derived class (grandchild) class MyGrandChild: public MyChild { }; int main() { MyGrandChild myObj; myObj.myFunction(); return 0; } OR // Base class class MyClass { public: void myFunction() { cout \u003c\u003c \"Some content in parent class.\" ; } }; // Another base class class MyOtherClass { public: void myOtherFunction() { cout \u003c\u003c \"Some content in another class.\" ; } }; // Derived class class MyChildClass: public MyClass, public MyOtherClass { }; int main() { MyChildClass myObj; myObj.myFunction(); myObj.myOtherFunction(); return 0; } Access Specifiers used protected which is similar to private, but it can be accessed in the inherited class. // Base class class Employee { protected: // Protected access specifier int salary; }; // Derived class class Programmer: public Employee { public: int bonus; void setSalary(int s) { salary = s; } int getSalary() { return salary; } }; int main() { Programmer myObj; myObj.setSalary(50000); myObj.bonus = 15000; cout \u003c\u003c \"Salary: \" \u003c\u003c myObj.getSalary() \u003c\u003c \"\\n\"; cout \u003c\u003c \"Bonus: \" \u003c\u003c myObj.bonus \u003c\u003c \"\\n\"; return 0; } ","date":"2022-12-31","objectID":"/cpp/:13:4","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Files #include\u003ciostream\u003e #include\u003cfstream\u003e ofstream — create and write to files ifstream – Reads from files fstream – A combination of ofstream and ifstream: create read write to files Create and write to a file #include\u003ciostream\u003e #include\u003cfstream\u003e using namespace std; int main(){ ofstream Myfile(\"test.txt\"); Myfile \u003c\u003c\"stay hungery and stay foolish!\"; Myfile.close(); return 0; } Read a file int main(){ string myText; ifstream MyreadFile(\"test.txt\"); while (getline(MyreadFile,myText)) { /* code */ cout\u003c\u003cmyText\u003c\u003cendl; } MyreadFile.close(); } ","date":"2022-12-31","objectID":"/cpp/:13:5","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["CPP"],"content":"Exceptions three keyword :try throw catch we use try block to test code if we throw the exception throw keyword to output a reference number try { int age = 5; if (age \u003e= 18) { cout \u003c\u003c \"Access granted - you are old enough.\"; } else { throw(age); } } catch (int myNum) { cout \u003c\u003c \"Access denied - You must be at least 18 years old.\\n\"; cout \u003c\u003c \"Age is: \" \u003c\u003c myNum; } in catch block we can use a reference number we throwed;if we don’t know what type we use ,we can use the “three dots” inside the catch block just like this catch (...){ // code } ","date":"2022-12-31","objectID":"/cpp/:13:6","tags":["cpp tutorial"],"title":"C++ notes","uri":"/cpp/"},{"categories":["LIFE"],"content":"some moments with her","date":"2022-12-03","objectID":"/withher/","tags":[],"title":"My Darling","uri":"/withher/"},{"categories":["LIFE"],"content":" Hello, My Sweetie Always being with you ","date":"2022-12-03","objectID":"/withher/:0:0","tags":[],"title":"My Darling","uri":"/withher/"},{"categories":null,"content":"About me","date":"0001-01-01","objectID":"/about/","tags":null,"title":"About myself","uri":"/about/"},{"categories":null,"content":"Introduce myself A general Chinese university student in science and technology Studying Mathematics, Computer Science and English(I hope that after I learn English I can also learn other languages) Like freedom, so I don’t let anyone stop chasing my dream! Like some digital products, want to be a geek Not a fat geek and don’t want to be one, So I like sports, work out (muscle building), basketball, and some aerobics like swimming and running Maybe I will add something more one day… ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About myself","uri":"/about/"}]